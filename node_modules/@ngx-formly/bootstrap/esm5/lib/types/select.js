/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ViewChild, ElementRef } from '@angular/core';
import { FieldType } from '@ngx-formly/core';
var FormlyFieldSelect = /** @class */ (function (_super) {
    tslib_1.__extends(FormlyFieldSelect, _super);
    function FormlyFieldSelect() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.defaultOptions = {
            templateOptions: { options: [] },
        };
        return _this;
    }
    // workaround for https://github.com/angular/angular/issues/10010
    // workaround for https://github.com/angular/angular/issues/10010
    /**
     * @return {?}
     */
    FormlyFieldSelect.prototype.ngAfterViewChecked = 
    // workaround for https://github.com/angular/angular/issues/10010
    /**
     * @return {?}
     */
    function () {
        if (!this.to.multiple && !this.to.placeholder && this.formControl.value === null) {
            /** @type {?} */
            var selectEl = this.select.nativeElement;
            if (selectEl.selectedIndex !== -1
                && (!selectEl.options[selectEl.selectedIndex] || selectEl.options[selectEl.selectedIndex].value !== null)) {
                this.select.nativeElement.selectedIndex = -1;
            }
        }
    };
    FormlyFieldSelect.decorators = [
        { type: Component, args: [{
                    selector: 'formly-field-select',
                    template: "\n    <select *ngIf=\"to.multiple; else singleSelect\" class=\"form-control\"\n      multiple\n      [class.custom-select]=\"to.customSelect\"\n      [formControl]=\"formControl\"\n      [class.is-invalid]=\"showError\"\n      [formlyAttributes]=\"field\">\n        <ng-container *ngFor=\"let item of to.options | formlySelectOptions:field | async\">\n         <optgroup *ngIf=\"item.group\" label=\"{{item.label}}\">\n            <option *ngFor=\"let child of item.group\" [ngValue]=\"child.value\" [disabled]=\"child.disabled\">\n              {{ child.label }}\n            </option>\n          </optgroup>\n          <option *ngIf=\"!item.group\" [ngValue]=\"item.value\" [disabled]=\"item.disabled\">{{ item.label }}</option>\n        </ng-container>\n    </select>\n\n    <ng-template #singleSelect>\n      <select class=\"form-control\"\n        #select\n        [formControl]=\"formControl\"\n        [class.custom-select]=\"to.customSelect\"\n        [class.is-invalid]=\"showError\"\n        [formlyAttributes]=\"field\">\n        <option *ngIf=\"to.placeholder\" [ngValue]=\"null\">{{ to.placeholder }}</option>\n        <ng-container *ngFor=\"let item of to.options | formlySelectOptions:field | async\">\n          <optgroup *ngIf=\"item.group\" label=\"{{item.label}}\">\n            <option *ngFor=\"let child of item.group\" [ngValue]=\"child.value\" [disabled]=\"child.disabled\">\n              {{ child.label }}\n            </option>\n          </optgroup>\n          <option *ngIf=\"!item.group\" [ngValue]=\"item.value\" [disabled]=\"item.disabled\">{{ item.label }}</option>\n        </ng-container>\n      </select>\n    </ng-template>\n  "
                }] }
    ];
    FormlyFieldSelect.propDecorators = {
        select: [{ type: ViewChild, args: ['select',] }]
    };
    return FormlyFieldSelect;
}(FieldType));
export { FormlyFieldSelect };
if (false) {
    /** @type {?} */
    FormlyFieldSelect.prototype.select;
    /** @type {?} */
    FormlyFieldSelect.prototype.defaultOptions;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neC1mb3JtbHkvYm9vdHN0cmFwLyIsInNvdXJjZXMiOlsibGliL3R5cGVzL3NlbGVjdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFvQixVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkYsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRTdDO0lBdUN1Qyw2Q0FBUztJQXZDaEQ7UUFBQSxxRUF3REM7UUFmQyxvQkFBYyxHQUFHO1lBQ2YsZUFBZSxFQUFFLEVBQUUsT0FBTyxFQUFFLEVBQUUsRUFBRTtTQUNqQyxDQUFDOztJQWFKLENBQUM7SUFYQyxpRUFBaUU7Ozs7O0lBQ2pFLDhDQUFrQjs7Ozs7SUFBbEI7UUFDRSxJQUFJLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxRQUFRLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFdBQVcsSUFBSSxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssS0FBSyxJQUFJLEVBQUU7O2dCQUMxRSxRQUFRLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxhQUFhO1lBQzFDLElBQUksUUFBUSxDQUFDLGFBQWEsS0FBSyxDQUFDLENBQUM7bUJBQzVCLENBQUMsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsSUFBSSxRQUFRLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxhQUFhLENBQUMsQ0FBQyxLQUFLLEtBQUssSUFBSSxDQUFDLEVBQ3pHO2dCQUNBLElBQUksQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLGFBQWEsR0FBRyxDQUFDLENBQUMsQ0FBQzthQUM5QztTQUNGO0lBQ0gsQ0FBQzs7Z0JBdkRGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUscUJBQXFCO29CQUMvQixRQUFRLEVBQUUsaW9EQW1DVDtpQkFDRjs7O3lCQUVFLFNBQVMsU0FBQyxRQUFROztJQWdCckIsd0JBQUM7Q0FBQSxBQXhERCxDQXVDdUMsU0FBUyxHQWlCL0M7U0FqQlksaUJBQWlCOzs7SUFDNUIsbUNBQTREOztJQUM1RCwyQ0FFRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgVmlld0NoaWxkLCBBZnRlclZpZXdDaGVja2VkLCBFbGVtZW50UmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGaWVsZFR5cGUgfSBmcm9tICdAbmd4LWZvcm1seS9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnZm9ybWx5LWZpZWxkLXNlbGVjdCcsXG4gIHRlbXBsYXRlOiBgXG4gICAgPHNlbGVjdCAqbmdJZj1cInRvLm11bHRpcGxlOyBlbHNlIHNpbmdsZVNlbGVjdFwiIGNsYXNzPVwiZm9ybS1jb250cm9sXCJcbiAgICAgIG11bHRpcGxlXG4gICAgICBbY2xhc3MuY3VzdG9tLXNlbGVjdF09XCJ0by5jdXN0b21TZWxlY3RcIlxuICAgICAgW2Zvcm1Db250cm9sXT1cImZvcm1Db250cm9sXCJcbiAgICAgIFtjbGFzcy5pcy1pbnZhbGlkXT1cInNob3dFcnJvclwiXG4gICAgICBbZm9ybWx5QXR0cmlidXRlc109XCJmaWVsZFwiPlxuICAgICAgICA8bmctY29udGFpbmVyICpuZ0Zvcj1cImxldCBpdGVtIG9mIHRvLm9wdGlvbnMgfCBmb3JtbHlTZWxlY3RPcHRpb25zOmZpZWxkIHwgYXN5bmNcIj5cbiAgICAgICAgIDxvcHRncm91cCAqbmdJZj1cIml0ZW0uZ3JvdXBcIiBsYWJlbD1cInt7aXRlbS5sYWJlbH19XCI+XG4gICAgICAgICAgICA8b3B0aW9uICpuZ0Zvcj1cImxldCBjaGlsZCBvZiBpdGVtLmdyb3VwXCIgW25nVmFsdWVdPVwiY2hpbGQudmFsdWVcIiBbZGlzYWJsZWRdPVwiY2hpbGQuZGlzYWJsZWRcIj5cbiAgICAgICAgICAgICAge3sgY2hpbGQubGFiZWwgfX1cbiAgICAgICAgICAgIDwvb3B0aW9uPlxuICAgICAgICAgIDwvb3B0Z3JvdXA+XG4gICAgICAgICAgPG9wdGlvbiAqbmdJZj1cIiFpdGVtLmdyb3VwXCIgW25nVmFsdWVdPVwiaXRlbS52YWx1ZVwiIFtkaXNhYmxlZF09XCJpdGVtLmRpc2FibGVkXCI+e3sgaXRlbS5sYWJlbCB9fTwvb3B0aW9uPlxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICA8L3NlbGVjdD5cblxuICAgIDxuZy10ZW1wbGF0ZSAjc2luZ2xlU2VsZWN0PlxuICAgICAgPHNlbGVjdCBjbGFzcz1cImZvcm0tY29udHJvbFwiXG4gICAgICAgICNzZWxlY3RcbiAgICAgICAgW2Zvcm1Db250cm9sXT1cImZvcm1Db250cm9sXCJcbiAgICAgICAgW2NsYXNzLmN1c3RvbS1zZWxlY3RdPVwidG8uY3VzdG9tU2VsZWN0XCJcbiAgICAgICAgW2NsYXNzLmlzLWludmFsaWRdPVwic2hvd0Vycm9yXCJcbiAgICAgICAgW2Zvcm1seUF0dHJpYnV0ZXNdPVwiZmllbGRcIj5cbiAgICAgICAgPG9wdGlvbiAqbmdJZj1cInRvLnBsYWNlaG9sZGVyXCIgW25nVmFsdWVdPVwibnVsbFwiPnt7IHRvLnBsYWNlaG9sZGVyIH19PC9vcHRpb24+XG4gICAgICAgIDxuZy1jb250YWluZXIgKm5nRm9yPVwibGV0IGl0ZW0gb2YgdG8ub3B0aW9ucyB8IGZvcm1seVNlbGVjdE9wdGlvbnM6ZmllbGQgfCBhc3luY1wiPlxuICAgICAgICAgIDxvcHRncm91cCAqbmdJZj1cIml0ZW0uZ3JvdXBcIiBsYWJlbD1cInt7aXRlbS5sYWJlbH19XCI+XG4gICAgICAgICAgICA8b3B0aW9uICpuZ0Zvcj1cImxldCBjaGlsZCBvZiBpdGVtLmdyb3VwXCIgW25nVmFsdWVdPVwiY2hpbGQudmFsdWVcIiBbZGlzYWJsZWRdPVwiY2hpbGQuZGlzYWJsZWRcIj5cbiAgICAgICAgICAgICAge3sgY2hpbGQubGFiZWwgfX1cbiAgICAgICAgICAgIDwvb3B0aW9uPlxuICAgICAgICAgIDwvb3B0Z3JvdXA+XG4gICAgICAgICAgPG9wdGlvbiAqbmdJZj1cIiFpdGVtLmdyb3VwXCIgW25nVmFsdWVdPVwiaXRlbS52YWx1ZVwiIFtkaXNhYmxlZF09XCJpdGVtLmRpc2FibGVkXCI+e3sgaXRlbS5sYWJlbCB9fTwvb3B0aW9uPlxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgIDwvc2VsZWN0PlxuICAgIDwvbmctdGVtcGxhdGU+XG4gIGAsXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1seUZpZWxkU2VsZWN0IGV4dGVuZHMgRmllbGRUeXBlIGltcGxlbWVudHMgQWZ0ZXJWaWV3Q2hlY2tlZCB7XG4gIEBWaWV3Q2hpbGQoJ3NlbGVjdCcpIHNlbGVjdCE6IEVsZW1lbnRSZWY8SFRNTFNlbGVjdEVsZW1lbnQ+O1xuICBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgICB0ZW1wbGF0ZU9wdGlvbnM6IHsgb3B0aW9uczogW10gfSxcbiAgfTtcblxuICAvLyB3b3JrYXJvdW5kIGZvciBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2lzc3Vlcy8xMDAxMFxuICBuZ0FmdGVyVmlld0NoZWNrZWQoKSB7XG4gICAgaWYgKCF0aGlzLnRvLm11bHRpcGxlICYmICF0aGlzLnRvLnBsYWNlaG9sZGVyICYmIHRoaXMuZm9ybUNvbnRyb2wudmFsdWUgPT09IG51bGwpIHtcbiAgICAgIGNvbnN0IHNlbGVjdEVsID0gdGhpcy5zZWxlY3QubmF0aXZlRWxlbWVudDtcbiAgICAgIGlmIChzZWxlY3RFbC5zZWxlY3RlZEluZGV4ICE9PSAtMVxuICAgICAgICAmJiAoIXNlbGVjdEVsLm9wdGlvbnNbc2VsZWN0RWwuc2VsZWN0ZWRJbmRleF0gfHwgc2VsZWN0RWwub3B0aW9uc1tzZWxlY3RFbC5zZWxlY3RlZEluZGV4XS52YWx1ZSAhPT0gbnVsbClcbiAgICAgICkge1xuICAgICAgICB0aGlzLnNlbGVjdC5uYXRpdmVFbGVtZW50LnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==