!function(o,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports,require("@angular/core"),require("@angular/common"),require("@angular/forms"),require("@ngx-formly/core"),require("@ngx-formly/core/select"),require("@ngx-formly/bootstrap/addons")):"function"==typeof define&&define.amd?define("@ngx-formly/bootstrap",["exports","@angular/core","@angular/common","@angular/forms","@ngx-formly/core","@ngx-formly/core/select","@ngx-formly/bootstrap/addons"],e):e((o["ngx-formly"]=o["ngx-formly"]||{},o["ngx-formly"].bootstrap={}),o.ng.core,o.ng.common,o.ng.forms,o.core$1,o.select,o["ngx-formly"].bootstrap.addons)}(this,function(o,t,e,n,r,l,i){"use strict";var s=function(o,e){return(s=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(o,e){o.__proto__=e}||function(o,e){for(var t in e)e.hasOwnProperty(t)&&(o[t]=e[t])})(o,e)};function a(o,e){function t(){this.constructor=o}s(o,e),o.prototype=null===e?Object.create(e):(t.prototype=e.prototype,new t)}var c=function(){return(c=Object.assign||function(o){for(var e,t=1,n=arguments.length;t<n;t++)for(var r in e=arguments[t])Object.prototype.hasOwnProperty.call(e,r)&&(o[r]=e[r]);return o}).apply(this,arguments)};function m(o,e){var t="function"==typeof Symbol&&o[Symbol.iterator];if(!t)return o;var n,r,l=t.call(o),i=[];try{for(;(void 0===e||0<e--)&&!(n=l.next()).done;)i.push(n.value)}catch(s){r={error:s}}finally{try{n&&!n.done&&(t=l["return"])&&t.call(l)}finally{if(r)throw r.error}}return i}function p(){for(var o=[],e=0;e<arguments.length;e++)o=o.concat(m(arguments[e]));return o}var f=function(e){function o(){var o=null!==e&&e.apply(this,arguments)||this;return o.defaultOptions={templateOptions:{indeterminate:!0,hideLabel:!0}},o}return a(o,e),o.decorators=[{type:t.Component,args:[{selector:"formly-field-checkbox",template:'\n    <div class="custom-control custom-checkbox">\n      <input class="custom-control-input" type="checkbox"\n        [class.is-invalid]="showError"\n        [indeterminate]="to.indeterminate && formControl.value === null"\n        [formControl]="formControl"\n        [formlyAttributes]="field">\n      <label class="custom-control-label" [for]="id">\n        {{ to.label }}\n        <span *ngIf="to.required && to.hideRequiredMarker !== true">*</span>\n      </label>\n    </div>\n  '}]}],o}(r.FieldType),u=function(e){function o(){var o=null!==e&&e.apply(this,arguments)||this;return o.defaultOptions={templateOptions:{options:[],formCheck:"custom"}},o}return a(o,e),o.prototype.onChange=function(e,o){var t;"array"===this.to.type?this.formControl.patchValue(o?p(this.formControl.value||[],[e]):p(this.formControl.value||[]).filter(function(o){return o!==e})):this.formControl.patchValue(c({},this.formControl.value,((t={})[e]=o,t))),this.formControl.markAsTouched()},o.decorators=[{type:t.Component,args:[{selector:"formly-field-multicheckbox",template:"\n    <div>\n      <div *ngFor=\"let option of to.options | formlySelectOptions:field | async; let i = index;\"\n        [ngClass]=\"{ 'form-check': to.formCheck !== 'custom', 'form-check-inline': to.formCheck === 'inline', 'custom-control custom-checkbox': to.formCheck === 'custom' }\"\n      >\n        <input type=\"checkbox\"\n          [id]=\"id + '_' + i\"\n          [class.form-check-input]=\"to.formCheck !== 'custom'\"\n          [class.custom-control-input]=\"to.formCheck === 'custom'\"\n          [value]=\"option.value\"\n          [checked]=\"formControl.value && (this.to.type === 'array' ? formControl.value.includes(option.value) : formControl.value[option.value])\"\n          [formlyAttributes]=\"field\"\n          (change)=\"onChange(option.value, $event.target.checked)\">\n        <label\n          [class.form-check-label]=\"to.formCheck !== 'custom'\"\n          [class.custom-control-label]=\"to.formCheck === 'custom'\"\n          [for]=\"id + '_' + i\">\n          {{ option.label }}\n        </label>\n      </div>\n    <div>\n  "}]}],o}(r.FieldType),d=function(o){function e(){return null!==o&&o.apply(this,arguments)||this}return a(e,o),Object.defineProperty(e.prototype,"type",{get:function(){return this.to.type||"text"},enumerable:!0,configurable:!0}),e.decorators=[{type:t.Component,args:[{selector:"formly-field-input",template:'\n    <input *ngIf="type !== \'number\' else numberTmp" [type]="type" [formControl]="formControl" class="form-control" [formlyAttributes]="field" [class.is-invalid]="showError">\n    <ng-template #numberTmp>\n      <input type="number" [formControl]="formControl" class="form-control" [formlyAttributes]="field" [class.is-invalid]="showError">\n    </ng-template>\n  '}]}],e}(r.FieldType),y=function(e){function o(){var o=null!==e&&e.apply(this,arguments)||this;return o.defaultOptions={templateOptions:{options:[],formCheck:"custom"}},o}return a(o,e),o.decorators=[{type:t.Component,args:[{selector:"formly-field-radio",template:'\n    <div>\n      <div *ngFor="let option of to.options | formlySelectOptions:field | async; let i = index;"\n        [ngClass]="{ \'form-check\': to.formCheck !== \'custom\', \'form-check-inline\': to.formCheck === \'inline\', \'custom-control custom-radio\': to.formCheck === \'custom\' }"\n      >\n        <input type="radio"\n          [id]="id + \'_\' + i"\n          [class.form-check-input]="to.formCheck !== \'custom\'"\n          [class.custom-control-input]="to.formCheck === \'custom\'"\n          [name]="id"\n          [class.is-invalid]="showError"\n          [attr.value]="option.value"\n          [value]="option.value"\n          [formControl]="formControl"\n          [formlyAttributes]="field">\n        <label\n          [class.form-check-label]="to.formCheck !== \'custom\'"\n          [class.custom-control-label]="to.formCheck === \'custom\'"\n          [for]="id + \'_\' + i">\n          {{ option.label }}\n        </label>\n      </div>\n    </div>\n  '}]}],o}(r.FieldType),h=function(e){function o(){var o=null!==e&&e.apply(this,arguments)||this;return o.defaultOptions={templateOptions:{cols:1,rows:1}},o}return a(o,e),o.decorators=[{type:t.Component,args:[{selector:"formly-field-textarea",template:'\n    <textarea [formControl]="formControl" [cols]="to.cols"\n      [rows]="to.rows" class="form-control" [class.is-invalid]="showError"\n      [formlyAttributes]="field">\n    </textarea>\n  '}]}],o}(r.FieldType),g=function(e){function o(){var o=null!==e&&e.apply(this,arguments)||this;return o.defaultOptions={templateOptions:{options:[]}},o}return a(o,e),o.prototype.ngAfterViewChecked=function(){if(!this.to.multiple&&!this.to.placeholder&&null===this.formControl.value){var o=this.select.nativeElement;-1===o.selectedIndex||o.options[o.selectedIndex]&&null===o.options[o.selectedIndex].value||(this.select.nativeElement.selectedIndex=-1)}},o.decorators=[{type:t.Component,args:[{selector:"formly-field-select",template:'\n    <select *ngIf="to.multiple; else singleSelect" class="form-control"\n      multiple\n      [class.custom-select]="to.customSelect"\n      [formControl]="formControl"\n      [class.is-invalid]="showError"\n      [formlyAttributes]="field">\n        <ng-container *ngFor="let item of to.options | formlySelectOptions:field | async">\n         <optgroup *ngIf="item.group" label="{{item.label}}">\n            <option *ngFor="let child of item.group" [ngValue]="child.value" [disabled]="child.disabled">\n              {{ child.label }}\n            </option>\n          </optgroup>\n          <option *ngIf="!item.group" [ngValue]="item.value" [disabled]="item.disabled">{{ item.label }}</option>\n        </ng-container>\n    </select>\n\n    <ng-template #singleSelect>\n      <select class="form-control"\n        #select\n        [formControl]="formControl"\n        [class.custom-select]="to.customSelect"\n        [class.is-invalid]="showError"\n        [formlyAttributes]="field">\n        <option *ngIf="to.placeholder" [ngValue]="null">{{ to.placeholder }}</option>\n        <ng-container *ngFor="let item of to.options | formlySelectOptions:field | async">\n          <optgroup *ngIf="item.group" label="{{item.label}}">\n            <option *ngFor="let child of item.group" [ngValue]="child.value" [disabled]="child.disabled">\n              {{ child.label }}\n            </option>\n          </optgroup>\n          <option *ngIf="!item.group" [ngValue]="item.value" [disabled]="item.disabled">{{ item.label }}</option>\n        </ng-container>\n      </select>\n    </ng-template>\n  '}]}],o.propDecorators={select:[{type:t.ViewChild,args:["select"]}]},o}(r.FieldType),b=function(o){function e(){return null!==o&&o.apply(this,arguments)||this}return a(e,o),e.decorators=[{type:t.Component,args:[{selector:"formly-wrapper-form-field",template:'\n    <div class="form-group" [class.has-error]="showError">\n      <label *ngIf="to.label && to.hideLabel !== true" [attr.for]="id">\n        {{ to.label }}\n        <span *ngIf="to.required && to.hideRequiredMarker !== true">*</span>\n      </label>\n\n      <ng-template #fieldComponent></ng-template>\n\n      <div *ngIf="showError" class="invalid-feedback" [style.display]="\'block\'">\n        <formly-validation-message [field]="field"></formly-validation-message>\n      </div>\n\n      <small *ngIf="to.description" class="form-text text-muted">{{ to.description }}</small>\n    </div>\n  '}]}],e}(r.FieldWrapper),v=[d,f,y,g,h,u,b],C={types:[{name:"input",component:d,wrappers:["form-field"]},{name:"checkbox",component:f,wrappers:["form-field"]},{name:"radio",component:y,wrappers:["form-field"]},{name:"select",component:g,wrappers:["form-field"]},{name:"textarea",component:h,wrappers:["form-field"]},{name:"multicheckbox",component:u,wrappers:["form-field"]}],wrappers:[{name:"form-field",component:b}]},k=function(){function o(){}return o.decorators=[{type:t.NgModule,args:[{declarations:[v],imports:[e.CommonModule,n.ReactiveFormsModule,l.FormlySelectModule,r.FormlyModule.forChild(C),i.FormlyBootstrapAddonsModule]}]}],o}();o.FormlyBootstrapModule=k,o.FormlyFieldCheckbox=f,o.FormlyFieldMultiCheckbox=u,o.FormlyFieldInput=d,o.FormlyFieldRadio=y,o.FormlyFieldTextArea=h,o.FormlyFieldSelect=g,o.FormlyWrapperFormField=b,o.ɵb=C,o.ɵa=v,Object.defineProperty(o,"__esModule",{value:!0})});
//# sourceMappingURL=ngx-formly-bootstrap.umd.min.js.map