{"version":3,"file":"ngx-formly-bootstrap.js.map","sources":["ng://@ngx-formly/bootstrap/lib/types/checkbox.ts","ng://@ngx-formly/bootstrap/lib/types/multicheckbox.ts","ng://@ngx-formly/bootstrap/lib/types/input.ts","ng://@ngx-formly/bootstrap/lib/types/radio.ts","ng://@ngx-formly/bootstrap/lib/types/textarea.ts","ng://@ngx-formly/bootstrap/lib/types/select.ts","ng://@ngx-formly/bootstrap/lib/wrappers/form-field.wrapper.ts","ng://@ngx-formly/bootstrap/lib/bootstrap.config.ts","ng://@ngx-formly/bootstrap/lib/bootstrap.module.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\n\n@Component({\n  selector: 'formly-field-checkbox',\n  template: `\n    <div class=\"custom-control custom-checkbox\">\n      <input class=\"custom-control-input\" type=\"checkbox\"\n        [class.is-invalid]=\"showError\"\n        [indeterminate]=\"to.indeterminate && formControl.value === null\"\n        [formControl]=\"formControl\"\n        [formlyAttributes]=\"field\">\n      <label class=\"custom-control-label\" [for]=\"id\">\n        {{ to.label }}\n        <span *ngIf=\"to.required && to.hideRequiredMarker !== true\">*</span>\n      </label>\n    </div>\n  `,\n})\nexport class FormlyFieldCheckbox extends FieldType {\n  defaultOptions = {\n    templateOptions: {\n      indeterminate: true,\n      hideLabel: true,\n    },\n  };\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\n\n@Component({\n  selector: 'formly-field-multicheckbox',\n  template: `\n    <div>\n      <div *ngFor=\"let option of to.options | formlySelectOptions:field | async; let i = index;\"\n        [ngClass]=\"{ 'form-check': to.formCheck !== 'custom', 'form-check-inline': to.formCheck === 'inline', 'custom-control custom-checkbox': to.formCheck === 'custom' }\"\n      >\n        <input type=\"checkbox\"\n          [id]=\"id + '_' + i\"\n          [class.form-check-input]=\"to.formCheck !== 'custom'\"\n          [class.custom-control-input]=\"to.formCheck === 'custom'\"\n          [value]=\"option.value\"\n          [checked]=\"formControl.value && (this.to.type === 'array' ? formControl.value.includes(option.value) : formControl.value[option.value])\"\n          [formlyAttributes]=\"field\"\n          (change)=\"onChange(option.value, $event.target.checked)\">\n        <label\n          [class.form-check-label]=\"to.formCheck !== 'custom'\"\n          [class.custom-control-label]=\"to.formCheck === 'custom'\"\n          [for]=\"id + '_' + i\">\n          {{ option.label }}\n        </label>\n      </div>\n    <div>\n  `,\n})\nexport class FormlyFieldMultiCheckbox extends FieldType {\n  defaultOptions = {\n    templateOptions: {\n      options: [],\n      formCheck: 'custom', // 'custom' | 'stacked' | 'inline'\n    },\n  };\n\n  onChange(value: any, checked: boolean) {\n    if (this.to.type === 'array') {\n      this.formControl.patchValue(checked\n        ? [...(this.formControl.value || []), value]\n        : [...(this.formControl.value || [])].filter(o => o !== value),\n      );\n    } else {\n      this.formControl.patchValue({ ...this.formControl.value, [value]: checked });\n    }\n    this.formControl.markAsTouched();\n  }\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\n\n@Component({\n  selector: 'formly-field-input',\n  template: `\n    <input *ngIf=\"type !== 'number' else numberTmp\" [type]=\"type\" [formControl]=\"formControl\" class=\"form-control\" [formlyAttributes]=\"field\" [class.is-invalid]=\"showError\">\n    <ng-template #numberTmp>\n      <input type=\"number\" [formControl]=\"formControl\" class=\"form-control\" [formlyAttributes]=\"field\" [class.is-invalid]=\"showError\">\n    </ng-template>\n  `,\n})\nexport class FormlyFieldInput extends FieldType {\n  get type() {\n    return this.to.type || 'text';\n  }\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\n\n@Component({\n  selector: 'formly-field-radio',\n  template: `\n    <div>\n      <div *ngFor=\"let option of to.options | formlySelectOptions:field | async; let i = index;\"\n        [ngClass]=\"{ 'form-check': to.formCheck !== 'custom', 'form-check-inline': to.formCheck === 'inline', 'custom-control custom-radio': to.formCheck === 'custom' }\"\n      >\n        <input type=\"radio\"\n          [id]=\"id + '_' + i\"\n          [class.form-check-input]=\"to.formCheck !== 'custom'\"\n          [class.custom-control-input]=\"to.formCheck === 'custom'\"\n          [name]=\"id\"\n          [class.is-invalid]=\"showError\"\n          [attr.value]=\"option.value\"\n          [value]=\"option.value\"\n          [formControl]=\"formControl\"\n          [formlyAttributes]=\"field\">\n        <label\n          [class.form-check-label]=\"to.formCheck !== 'custom'\"\n          [class.custom-control-label]=\"to.formCheck === 'custom'\"\n          [for]=\"id + '_' + i\">\n          {{ option.label }}\n        </label>\n      </div>\n    </div>\n  `,\n})\nexport class FormlyFieldRadio extends FieldType {\n  defaultOptions = {\n    templateOptions: {\n      options: [],\n      formCheck: 'custom', // 'custom' | 'stacked' | 'inline'\n    },\n  };\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\n\n@Component({\n  selector: 'formly-field-textarea',\n  template: `\n    <textarea [formControl]=\"formControl\" [cols]=\"to.cols\"\n      [rows]=\"to.rows\" class=\"form-control\" [class.is-invalid]=\"showError\"\n      [formlyAttributes]=\"field\">\n    </textarea>\n  `,\n})\nexport class FormlyFieldTextArea extends FieldType {\n  defaultOptions = {\n    templateOptions: {\n      cols: 1,\n      rows: 1,\n    },\n  };\n}\n","import { Component, ViewChild, AfterViewChecked, ElementRef } from '@angular/core';\nimport { FieldType } from '@ngx-formly/core';\n\n@Component({\n  selector: 'formly-field-select',\n  template: `\n    <select *ngIf=\"to.multiple; else singleSelect\" class=\"form-control\"\n      multiple\n      [class.custom-select]=\"to.customSelect\"\n      [formControl]=\"formControl\"\n      [class.is-invalid]=\"showError\"\n      [formlyAttributes]=\"field\">\n        <ng-container *ngFor=\"let item of to.options | formlySelectOptions:field | async\">\n         <optgroup *ngIf=\"item.group\" label=\"{{item.label}}\">\n            <option *ngFor=\"let child of item.group\" [ngValue]=\"child.value\" [disabled]=\"child.disabled\">\n              {{ child.label }}\n            </option>\n          </optgroup>\n          <option *ngIf=\"!item.group\" [ngValue]=\"item.value\" [disabled]=\"item.disabled\">{{ item.label }}</option>\n        </ng-container>\n    </select>\n\n    <ng-template #singleSelect>\n      <select class=\"form-control\"\n        #select\n        [formControl]=\"formControl\"\n        [class.custom-select]=\"to.customSelect\"\n        [class.is-invalid]=\"showError\"\n        [formlyAttributes]=\"field\">\n        <option *ngIf=\"to.placeholder\" [ngValue]=\"null\">{{ to.placeholder }}</option>\n        <ng-container *ngFor=\"let item of to.options | formlySelectOptions:field | async\">\n          <optgroup *ngIf=\"item.group\" label=\"{{item.label}}\">\n            <option *ngFor=\"let child of item.group\" [ngValue]=\"child.value\" [disabled]=\"child.disabled\">\n              {{ child.label }}\n            </option>\n          </optgroup>\n          <option *ngIf=\"!item.group\" [ngValue]=\"item.value\" [disabled]=\"item.disabled\">{{ item.label }}</option>\n        </ng-container>\n      </select>\n    </ng-template>\n  `,\n})\nexport class FormlyFieldSelect extends FieldType implements AfterViewChecked {\n  @ViewChild('select') select!: ElementRef<HTMLSelectElement>;\n  defaultOptions = {\n    templateOptions: { options: [] },\n  };\n\n  // workaround for https://github.com/angular/angular/issues/10010\n  ngAfterViewChecked() {\n    if (!this.to.multiple && !this.to.placeholder && this.formControl.value === null) {\n      const selectEl = this.select.nativeElement;\n      if (selectEl.selectedIndex !== -1\n        && (!selectEl.options[selectEl.selectedIndex] || selectEl.options[selectEl.selectedIndex].value !== null)\n      ) {\n        this.select.nativeElement.selectedIndex = -1;\n      }\n    }\n  }\n}\n","import { Component } from '@angular/core';\nimport { FieldWrapper } from '@ngx-formly/core';\n\n@Component({\n  selector: 'formly-wrapper-form-field',\n  template: `\n    <div class=\"form-group\" [class.has-error]=\"showError\">\n      <label *ngIf=\"to.label && to.hideLabel !== true\" [attr.for]=\"id\">\n        {{ to.label }}\n        <span *ngIf=\"to.required && to.hideRequiredMarker !== true\">*</span>\n      </label>\n\n      <ng-template #fieldComponent></ng-template>\n\n      <div *ngIf=\"showError\" class=\"invalid-feedback\" [style.display]=\"'block'\">\n        <formly-validation-message [field]=\"field\"></formly-validation-message>\n      </div>\n\n      <small *ngIf=\"to.description\" class=\"form-text text-muted\">{{ to.description }}</small>\n    </div>\n  `,\n})\nexport class FormlyWrapperFormField extends FieldWrapper {\n}\n","import { ConfigOption } from '@ngx-formly/core';\nimport {\n  FormlyFieldInput,\n  FormlyFieldCheckbox,\n  FormlyFieldRadio,\n  FormlyFieldSelect,\n  FormlyFieldTextArea,\n  FormlyFieldMultiCheckbox,\n} from './types/types';\nimport { FormlyWrapperFormField } from './wrappers/wrappers';\n\nexport const FIELD_TYPE_COMPONENTS = [\n  // types\n  FormlyFieldInput,\n  FormlyFieldCheckbox,\n  FormlyFieldRadio,\n  FormlyFieldSelect,\n  FormlyFieldTextArea,\n  FormlyFieldMultiCheckbox,\n\n  // wrappers\n  FormlyWrapperFormField,\n];\n\nexport const BOOTSTRAP_FORMLY_CONFIG: ConfigOption = {\n  types: [\n    {\n      name: 'input',\n      component: FormlyFieldInput,\n      wrappers: ['form-field'],\n    },\n    {\n      name: 'checkbox',\n      component: FormlyFieldCheckbox,\n      wrappers: ['form-field'],\n    },\n    {\n      name: 'radio',\n      component: FormlyFieldRadio,\n      wrappers: ['form-field'],\n    },\n    {\n      name: 'select',\n      component: FormlyFieldSelect,\n      wrappers: ['form-field'],\n    },\n    {\n      name: 'textarea',\n      component: FormlyFieldTextArea,\n      wrappers: ['form-field'],\n    },\n    {\n      name: 'multicheckbox',\n      component: FormlyFieldMultiCheckbox,\n      wrappers: ['form-field'],\n    },\n  ],\n  wrappers: [\n    {name: 'form-field', component: FormlyWrapperFormField },\n  ],\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { FormlyModule } from '@ngx-formly/core';\nimport { FormlySelectModule } from '@ngx-formly/core/select';\nimport { BOOTSTRAP_FORMLY_CONFIG, FIELD_TYPE_COMPONENTS } from './bootstrap.config';\nimport { FormlyBootstrapAddonsModule } from '@ngx-formly/bootstrap/addons';\n\n@NgModule({\n  declarations: [\n    FIELD_TYPE_COMPONENTS,\n  ],\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    FormlySelectModule,\n    FormlyModule.forChild(BOOTSTRAP_FORMLY_CONFIG),\n    FormlyBootstrapAddonsModule,\n  ],\n})\nexport class FormlyBootstrapModule {}\n"],"names":["tslib_1.__extends","tslib_1.__spread"],"mappings":"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"}
