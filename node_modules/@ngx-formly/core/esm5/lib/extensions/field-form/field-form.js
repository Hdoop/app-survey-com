/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { AbstractControl, FormGroup, FormControl } from '@angular/forms';
import { getKeyPath, getFieldValue, defineHiddenProp } from '../../utils';
import { registerControl } from './utils';
/**
 * \@experimental
 */
var /**
 * \@experimental
 */
FieldFormExtension = /** @class */ (function () {
    function FieldFormExtension() {
    }
    /**
     * @param {?} field
     * @return {?}
     */
    FieldFormExtension.prototype.onPopulate = /**
     * @param {?} field
     * @return {?}
     */
    function (field) {
        // TODO: add an option to skip extension
        if (field.fieldArray) {
            return;
        }
        if (field.key) {
            this.addFormControl(field);
        }
        if (field.parent && field.fieldGroup && !field.key) {
            defineHiddenProp(field, 'formControl', field.parent.formControl);
        }
    };
    /**
     * @private
     * @param {?} field
     * @return {?}
     */
    FieldFormExtension.prototype.addFormControl = /**
     * @private
     * @param {?} field
     * @return {?}
     */
    function (field) {
        /** @type {?} */
        var controlOptions = {
            validators: field._validators,
            asyncValidators: field._asyncValidators,
            updateOn: field.modelOptions.updateOn,
        };
        /** @type {?} */
        var control;
        /** @type {?} */
        var form = (/** @type {?} */ (field.parent.formControl));
        /** @type {?} */
        var value = getFieldValue(field);
        /** @type {?} */
        var paths = getKeyPath(field);
        if (field.formControl instanceof AbstractControl || (form && form.get(paths))) {
            control = field.formControl || form.get(paths);
            if ((controlOptions.validators !== control.validator)
                || (controlOptions.asyncValidators !== control.asyncValidator)) {
                if (controlOptions.validators !== control.validator) {
                    control.setValidators(controlOptions.validators);
                }
                if (controlOptions.asyncValidators !== control.asyncValidator) {
                    control.setAsyncValidators(controlOptions.asyncValidators);
                }
                control.updateValueAndValidity();
            }
        }
        else if (field._componentFactory && field._componentFactory.component && field._componentFactory.component.createControl) {
            /** @type {?} */
            var component = field._componentFactory.component;
            console.warn("NgxFormly: '" + component.name + "::createControl' is deprecated since v5.0, use 'prePopulate' hook instead.");
            control = component.createControl(value, field);
        }
        else if (field.fieldGroup) {
            // TODO: move to postPopulate
            control = new FormGroup({}, controlOptions);
        }
        else {
            control = new FormControl(value, controlOptions);
        }
        registerControl(field, control);
    };
    return FieldFormExtension;
}());
/**
 * \@experimental
 */
export { FieldFormExtension };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGQtZm9ybS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZ3gtZm9ybWx5L2NvcmUvIiwic291cmNlcyI6WyJsaWIvZXh0ZW5zaW9ucy9maWVsZC1mb3JtL2ZpZWxkLWZvcm0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUVBLE9BQU8sRUFBRSxlQUFlLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBMEIsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRyxPQUFPLEVBQUUsVUFBVSxFQUFFLGFBQWEsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMxRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sU0FBUyxDQUFDOzs7O0FBRzFDOzs7O0lBQUE7SUFzREEsQ0FBQzs7Ozs7SUFyREMsdUNBQVU7Ozs7SUFBVixVQUFXLEtBQTZCO1FBQ3RDLHdDQUF3QztRQUN4QyxJQUFJLEtBQUssQ0FBQyxVQUFVLEVBQUU7WUFDcEIsT0FBTztTQUNSO1FBRUQsSUFBSSxLQUFLLENBQUMsR0FBRyxFQUFFO1lBQ2IsSUFBSSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUM1QjtRQUVELElBQUksS0FBSyxDQUFDLE1BQU0sSUFBSSxLQUFLLENBQUMsVUFBVSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsRUFBRTtZQUNsRCxnQkFBZ0IsQ0FBQyxLQUFLLEVBQUUsYUFBYSxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDbEU7SUFDSCxDQUFDOzs7Ozs7SUFFTywyQ0FBYzs7Ozs7SUFBdEIsVUFBdUIsS0FBNkI7O1lBQzVDLGNBQWMsR0FBMkI7WUFDN0MsVUFBVSxFQUFFLEtBQUssQ0FBQyxXQUFXO1lBQzdCLGVBQWUsRUFBRSxLQUFLLENBQUMsZ0JBQWdCO1lBQ3ZDLFFBQVEsRUFBRSxLQUFLLENBQUMsWUFBWSxDQUFDLFFBQVE7U0FDdEM7O1lBQ0csT0FBd0I7O1lBRXRCLElBQUksR0FBRyxtQkFBQSxLQUFLLENBQUMsTUFBTSxDQUFDLFdBQVcsRUFBYTs7WUFDNUMsS0FBSyxHQUFHLGFBQWEsQ0FBQyxLQUFLLENBQUM7O1lBQzVCLEtBQUssR0FBRyxVQUFVLENBQUMsS0FBSyxDQUFDO1FBQy9CLElBQUksS0FBSyxDQUFDLFdBQVcsWUFBWSxlQUFlLElBQUksQ0FBQyxJQUFJLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQzdFLE9BQU8sR0FBRyxLQUFLLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDL0MsSUFDRSxDQUFDLGNBQWMsQ0FBQyxVQUFVLEtBQUssT0FBTyxDQUFDLFNBQVMsQ0FBQzttQkFDOUMsQ0FBQyxjQUFjLENBQUMsZUFBZSxLQUFLLE9BQU8sQ0FBQyxjQUFjLENBQUMsRUFDOUQ7Z0JBQ0EsSUFBSSxjQUFjLENBQUMsVUFBVSxLQUFLLE9BQU8sQ0FBQyxTQUFTLEVBQUU7b0JBQ25ELE9BQU8sQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2lCQUNsRDtnQkFDRCxJQUFJLGNBQWMsQ0FBQyxlQUFlLEtBQUssT0FBTyxDQUFDLGNBQWMsRUFBRTtvQkFDN0QsT0FBTyxDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxlQUFlLENBQUMsQ0FBQztpQkFDNUQ7Z0JBQ0QsT0FBTyxDQUFDLHNCQUFzQixFQUFFLENBQUM7YUFDbEM7U0FDRjthQUFNLElBQUksS0FBSyxDQUFDLGlCQUFpQixJQUFJLEtBQUssQ0FBQyxpQkFBaUIsQ0FBQyxTQUFTLElBQUksS0FBSyxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxhQUFhLEVBQUU7O2dCQUNwSCxTQUFTLEdBQUcsS0FBSyxDQUFDLGlCQUFpQixDQUFDLFNBQVM7WUFDbkQsT0FBTyxDQUFDLElBQUksQ0FBQyxpQkFBZSxTQUFTLENBQUMsSUFBSSwrRUFBNEUsQ0FBQyxDQUFDO1lBQ3hILE9BQU8sR0FBRyxTQUFTLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsQ0FBQztTQUNqRDthQUFNLElBQUksS0FBSyxDQUFDLFVBQVUsRUFBRTtZQUMzQiw2QkFBNkI7WUFDN0IsT0FBTyxHQUFHLElBQUksU0FBUyxDQUFDLEVBQUUsRUFBRSxjQUFjLENBQUMsQ0FBQztTQUM3QzthQUFNO1lBQ0wsT0FBTyxHQUFHLElBQUksV0FBVyxDQUFDLEtBQUssRUFBRSxjQUFjLENBQUMsQ0FBQztTQUNsRDtRQUVELGVBQWUsQ0FBQyxLQUFLLEVBQUUsT0FBTyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUNILHlCQUFDO0FBQUQsQ0FBQyxBQXRERCxJQXNEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZvcm1seUV4dGVuc2lvbiB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2Zvcm1seS5jb25maWcnO1xuaW1wb3J0IHsgRm9ybWx5RmllbGRDb25maWdDYWNoZSB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvZm9ybWx5LmZpZWxkLmNvbmZpZyc7XG5pbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wsIEZvcm1Hcm91cCwgRm9ybUNvbnRyb2wsIEFic3RyYWN0Q29udHJvbE9wdGlvbnMgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBnZXRLZXlQYXRoLCBnZXRGaWVsZFZhbHVlLCBkZWZpbmVIaWRkZW5Qcm9wIH0gZnJvbSAnLi4vLi4vdXRpbHMnO1xuaW1wb3J0IHsgcmVnaXN0ZXJDb250cm9sIH0gZnJvbSAnLi91dGlscyc7XG5cbi8qKiBAZXhwZXJpbWVudGFsICovXG5leHBvcnQgY2xhc3MgRmllbGRGb3JtRXh0ZW5zaW9uIGltcGxlbWVudHMgRm9ybWx5RXh0ZW5zaW9uIHtcbiAgb25Qb3B1bGF0ZShmaWVsZDogRm9ybWx5RmllbGRDb25maWdDYWNoZSkge1xuICAgIC8vIFRPRE86IGFkZCBhbiBvcHRpb24gdG8gc2tpcCBleHRlbnNpb25cbiAgICBpZiAoZmllbGQuZmllbGRBcnJheSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChmaWVsZC5rZXkpIHtcbiAgICAgIHRoaXMuYWRkRm9ybUNvbnRyb2woZmllbGQpO1xuICAgIH1cblxuICAgIGlmIChmaWVsZC5wYXJlbnQgJiYgZmllbGQuZmllbGRHcm91cCAmJiAhZmllbGQua2V5KSB7XG4gICAgICBkZWZpbmVIaWRkZW5Qcm9wKGZpZWxkLCAnZm9ybUNvbnRyb2wnLCBmaWVsZC5wYXJlbnQuZm9ybUNvbnRyb2wpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgYWRkRm9ybUNvbnRyb2woZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnQ2FjaGUpIHtcbiAgICBjb25zdCBjb250cm9sT3B0aW9uczogQWJzdHJhY3RDb250cm9sT3B0aW9ucyA9IHtcbiAgICAgIHZhbGlkYXRvcnM6IGZpZWxkLl92YWxpZGF0b3JzLFxuICAgICAgYXN5bmNWYWxpZGF0b3JzOiBmaWVsZC5fYXN5bmNWYWxpZGF0b3JzLFxuICAgICAgdXBkYXRlT246IGZpZWxkLm1vZGVsT3B0aW9ucy51cGRhdGVPbixcbiAgICB9O1xuICAgIGxldCBjb250cm9sOiBBYnN0cmFjdENvbnRyb2w7XG5cbiAgICBjb25zdCBmb3JtID0gZmllbGQucGFyZW50LmZvcm1Db250cm9sIGFzIEZvcm1Hcm91cDtcbiAgICBjb25zdCB2YWx1ZSA9IGdldEZpZWxkVmFsdWUoZmllbGQpO1xuICAgIGNvbnN0IHBhdGhzID0gZ2V0S2V5UGF0aChmaWVsZCk7XG4gICAgaWYgKGZpZWxkLmZvcm1Db250cm9sIGluc3RhbmNlb2YgQWJzdHJhY3RDb250cm9sIHx8IChmb3JtICYmIGZvcm0uZ2V0KHBhdGhzKSkpIHtcbiAgICAgIGNvbnRyb2wgPSBmaWVsZC5mb3JtQ29udHJvbCB8fCBmb3JtLmdldChwYXRocyk7XG4gICAgICBpZiAoXG4gICAgICAgIChjb250cm9sT3B0aW9ucy52YWxpZGF0b3JzICE9PSBjb250cm9sLnZhbGlkYXRvcilcbiAgICAgICAgfHwgKGNvbnRyb2xPcHRpb25zLmFzeW5jVmFsaWRhdG9ycyAhPT0gY29udHJvbC5hc3luY1ZhbGlkYXRvcilcbiAgICAgICkge1xuICAgICAgICBpZiAoY29udHJvbE9wdGlvbnMudmFsaWRhdG9ycyAhPT0gY29udHJvbC52YWxpZGF0b3IpIHtcbiAgICAgICAgICBjb250cm9sLnNldFZhbGlkYXRvcnMoY29udHJvbE9wdGlvbnMudmFsaWRhdG9ycyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvbnRyb2xPcHRpb25zLmFzeW5jVmFsaWRhdG9ycyAhPT0gY29udHJvbC5hc3luY1ZhbGlkYXRvcikge1xuICAgICAgICAgIGNvbnRyb2wuc2V0QXN5bmNWYWxpZGF0b3JzKGNvbnRyb2xPcHRpb25zLmFzeW5jVmFsaWRhdG9ycyk7XG4gICAgICAgIH1cbiAgICAgICAgY29udHJvbC51cGRhdGVWYWx1ZUFuZFZhbGlkaXR5KCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChmaWVsZC5fY29tcG9uZW50RmFjdG9yeSAmJiBmaWVsZC5fY29tcG9uZW50RmFjdG9yeS5jb21wb25lbnQgJiYgZmllbGQuX2NvbXBvbmVudEZhY3RvcnkuY29tcG9uZW50LmNyZWF0ZUNvbnRyb2wpIHtcbiAgICAgIGNvbnN0IGNvbXBvbmVudCA9IGZpZWxkLl9jb21wb25lbnRGYWN0b3J5LmNvbXBvbmVudDtcbiAgICAgIGNvbnNvbGUud2FybihgTmd4Rm9ybWx5OiAnJHtjb21wb25lbnQubmFtZX06OmNyZWF0ZUNvbnRyb2wnIGlzIGRlcHJlY2F0ZWQgc2luY2UgdjUuMCwgdXNlICdwcmVQb3B1bGF0ZScgaG9vayBpbnN0ZWFkLmApO1xuICAgICAgY29udHJvbCA9IGNvbXBvbmVudC5jcmVhdGVDb250cm9sKHZhbHVlLCBmaWVsZCk7XG4gICAgfSBlbHNlIGlmIChmaWVsZC5maWVsZEdyb3VwKSB7XG4gICAgICAvLyBUT0RPOiBtb3ZlIHRvIHBvc3RQb3B1bGF0ZVxuICAgICAgY29udHJvbCA9IG5ldyBGb3JtR3JvdXAoe30sIGNvbnRyb2xPcHRpb25zKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29udHJvbCA9IG5ldyBGb3JtQ29udHJvbCh2YWx1ZSwgY29udHJvbE9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJlZ2lzdGVyQ29udHJvbChmaWVsZCwgY29udHJvbCk7XG4gIH1cbn1cbiJdfQ==