/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output, ViewContainerRef, ViewChild, Attribute, ComponentFactoryResolver, Injector, } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { FormlyConfig } from '../services/formly.config';
import { defineHiddenProp } from '../utils';
var FormlyField = /** @class */ (function () {
    function FormlyField(formlyConfig, componentFactoryResolver, injector, 
    // tslint:disable-next-line
    hideDeprecation) {
        this.formlyConfig = formlyConfig;
        this.componentFactoryResolver = componentFactoryResolver;
        this.injector = injector;
        this.className = '';
        this.warnDeprecation = false;
        this.modelChange = new EventEmitter();
        this.refsUnsubscribe = (/**
         * @return {?}
         */
        function () { });
        this.warnDeprecation = hideDeprecation === null;
    }
    Object.defineProperty(FormlyField.prototype, "model", {
        set: /**
         * @param {?} m
         * @return {?}
         */
        function (m) {
            this.warnDeprecation && console.warn("NgxFormly: passing 'model' input to '" + this.constructor.name + "' component is not required anymore, you may remove it!");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormlyField.prototype, "form", {
        set: /**
         * @param {?} form
         * @return {?}
         */
        function (form) {
            this.warnDeprecation && console.warn("NgxFormly: passing 'form' input to '" + this.constructor.name + "' component is not required anymore, you may remove it!");
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FormlyField.prototype, "options", {
        set: /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            this.warnDeprecation && console.warn("NgxFormly: passing 'options' input to '" + this.constructor.name + "' component is not required anymore, you may remove it!");
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    FormlyField.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        this.triggerHook('afterContentInit');
    };
    /**
     * @return {?}
     */
    FormlyField.prototype.ngAfterContentChecked = /**
     * @return {?}
     */
    function () {
        this.triggerHook('afterContentChecked');
    };
    /**
     * @return {?}
     */
    FormlyField.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        this.triggerHook('afterViewInit');
    };
    /**
     * @return {?}
     */
    FormlyField.prototype.ngAfterViewChecked = /**
     * @return {?}
     */
    function () {
        this.triggerHook('afterViewChecked');
    };
    /**
     * @return {?}
     */
    FormlyField.prototype.ngDoCheck = /**
     * @return {?}
     */
    function () {
        this.triggerHook('doCheck');
    };
    /**
     * @return {?}
     */
    FormlyField.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.triggerHook('onInit');
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    FormlyField.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.field) {
            this.refsUnsubscribe = this.renderField(this.field, this.containerRef);
        }
        this.triggerHook('onChanges', changes);
    };
    /**
     * @return {?}
     */
    FormlyField.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.triggerHook('onDestroy');
        this.refsUnsubscribe();
    };
    /**
     * @private
     * @param {?} f
     * @param {?} containerRef
     * @return {?}
     */
    FormlyField.prototype.renderField = /**
     * @private
     * @param {?} f
     * @param {?} containerRef
     * @return {?}
     */
    function (f, containerRef) {
        var _this = this;
        this.refsUnsubscribe();
        (f.wrappers || []).forEach((/**
         * @param {?} wrapper
         * @return {?}
         */
        function (wrapper) {
            containerRef = _this.createWrapperRef(f, containerRef, _this.formlyConfig.getWrapper(wrapper));
        }));
        /** @type {?} */
        var ref = this.formlyConfig.createComponent(f, this.componentFactoryResolver, this.injector);
        if (ref) {
            containerRef.insert(ref.hostView);
            this.attachComponentRef(ref, f);
        }
        return (/**
         * @return {?}
         */
        function () {
            (f._componentRefs || []).forEach((/**
             * @param {?} componentRef
             * @return {?}
             */
            function (componentRef) { return componentRef.destroy(); }));
            f._componentRefs = [];
        });
    };
    /**
     * @private
     * @param {?} name
     * @param {?=} changes
     * @return {?}
     */
    FormlyField.prototype.triggerHook = /**
     * @private
     * @param {?} name
     * @param {?=} changes
     * @return {?}
     */
    function (name, changes) {
        if (this.field.hooks && this.field.hooks[name]) {
            if (!changes || changes.field) {
                this.field.hooks[name](this.field);
            }
        }
        if (this.field.lifecycle && this.field.lifecycle[name]) {
            this.field.lifecycle[name](this.field.form, this.field, this.field.model, this.field.options);
        }
    };
    /**
     * @private
     * @template T
     * @param {?} field
     * @param {?} containerRef
     * @param {?} config
     * @return {?}
     */
    FormlyField.prototype.createWrapperRef = /**
     * @private
     * @template T
     * @param {?} field
     * @param {?} containerRef
     * @param {?} config
     * @return {?}
     */
    function (field, containerRef, config) {
        /** @type {?} */
        var cfr = field.options && field.options._componentFactoryResolver
            ? field.options._componentFactoryResolver
            : this.componentFactoryResolver;
        /** @type {?} */
        var ref = containerRef.createComponent(cfr.resolveComponentFactory(config.component));
        this.attachComponentRef(ref, field);
        if (!ref.instance.fieldComponent) {
            throw Error(config.component.prototype.constructor.name + "#fieldComponent: missing 'static' flag for '@ViewChild' query, it should be explicitly defined by '@ViewChild(..., { static: true })'.");
        }
        return ref.instance.fieldComponent;
    };
    /**
     * @private
     * @template T
     * @param {?} ref
     * @param {?} field
     * @return {?}
     */
    FormlyField.prototype.attachComponentRef = /**
     * @private
     * @template T
     * @param {?} ref
     * @param {?} field
     * @return {?}
     */
    function (ref, field) {
        if (field._componentRefs) {
            field._componentRefs.push(ref);
        }
        else {
            defineHiddenProp(field, '_componentRefs', [ref]);
        }
        Object.assign(ref.instance, { field: field });
    };
    FormlyField.decorators = [
        { type: Component, args: [{
                    selector: 'formly-field',
                    template: "<ng-template #container></ng-template>",
                    host: {
                        '[style.display]': 'field.hide ? "none":""',
                        '[class]': 'field.className? field.className : className',
                    }
                }] }
    ];
    /** @nocollapse */
    FormlyField.ctorParameters = function () { return [
        { type: FormlyConfig },
        { type: ComponentFactoryResolver },
        { type: Injector },
        { type: undefined, decorators: [{ type: Attribute, args: ['hide-deprecation',] }] }
    ]; };
    FormlyField.propDecorators = {
        field: [{ type: Input }],
        className: [{ type: Input, args: ['class',] }],
        model: [{ type: Input }],
        form: [{ type: Input }],
        options: [{ type: Input }],
        modelChange: [{ type: Output }],
        containerRef: [{ type: ViewChild, args: ['container', (/** @type {?} */ ({ read: ViewContainerRef, static: true })),] }]
    };
    return FormlyField;
}());
export { FormlyField };
if (false) {
    /** @type {?} */
    FormlyField.prototype.field;
    /** @type {?} */
    FormlyField.prototype.className;
    /** @type {?} */
    FormlyField.prototype.warnDeprecation;
    /** @type {?} */
    FormlyField.prototype.modelChange;
    /** @type {?} */
    FormlyField.prototype.containerRef;
    /** @type {?} */
    FormlyField.prototype.refsUnsubscribe;
    /**
     * @type {?}
     * @private
     */
    FormlyField.prototype.formlyConfig;
    /**
     * @type {?}
     * @private
     */
    FormlyField.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    FormlyField.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybWx5LmZpZWxkLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQG5neC1mb3JtbHkvY29yZS8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2Zvcm1seS5maWVsZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUNMLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFDdEMsZ0JBQWdCLEVBQUUsU0FBUyxFQUErQixTQUFTLEVBQUUsd0JBQXdCLEVBQ2tCLFFBQVEsR0FDeEgsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUV6RCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFJNUM7SUFnQ0UscUJBQ1UsWUFBMEIsRUFDMUIsd0JBQWtELEVBQ2xELFFBQWtCO0lBQzFCLDJCQUEyQjtJQUNJLGVBQWU7UUFKdEMsaUJBQVksR0FBWixZQUFZLENBQWM7UUFDMUIsNkJBQXdCLEdBQXhCLHdCQUF3QixDQUEwQjtRQUNsRCxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBekJaLGNBQVMsR0FBVyxFQUFFLENBQUM7UUFFdkMsb0JBQWUsR0FBRyxLQUFLLENBQUM7UUFjZCxnQkFBVyxHQUFzQixJQUFJLFlBQVksRUFBRSxDQUFDO1FBSTlELG9CQUFlOzs7UUFBRyxjQUFPLENBQUMsRUFBQztRQVN6QixJQUFJLENBQUMsZUFBZSxHQUFHLGVBQWUsS0FBSyxJQUFJLENBQUM7SUFDbEQsQ0FBQztJQTFCRCxzQkFBYSw4QkFBSzs7Ozs7UUFBbEIsVUFBbUIsQ0FBTTtZQUN2QixJQUFJLENBQUMsZUFBZSxJQUFJLE9BQU8sQ0FBQyxJQUFJLENBQUMsMENBQXdDLElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSw0REFBeUQsQ0FBQyxDQUFDO1FBQy9KLENBQUM7OztPQUFBO0lBRUQs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QUV2QyxzQ0FBd0I7O0lBY3hCLGtDQUE4RDs7SUFFOUQsbUNBQXNHOztJQUV0RyxzQ0FBMkI7Ozs7O0lBR3pCLG1DQUFrQzs7Ozs7SUFDbEMsK0NBQTBEOzs7OztJQUMxRCwrQkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE91dHB1dCwgVHlwZSxcbiAgVmlld0NvbnRhaW5lclJlZiwgVmlld0NoaWxkLCBDb21wb25lbnRSZWYsIFNpbXBsZUNoYW5nZXMsIEF0dHJpYnV0ZSwgQ29tcG9uZW50RmFjdG9yeVJlc29sdmVyLFxuICBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBEb0NoZWNrLCBBZnRlckNvbnRlbnRJbml0LCBBZnRlckNvbnRlbnRDaGVja2VkLCBBZnRlclZpZXdJbml0LCBBZnRlclZpZXdDaGVja2VkLCBJbmplY3Rvcixcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBGb3JtR3JvdXAgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBGb3JtbHlDb25maWcgfSBmcm9tICcuLi9zZXJ2aWNlcy9mb3JtbHkuY29uZmlnJztcbmltcG9ydCB7IEZvcm1seUZpZWxkQ29uZmlnLCBGb3JtbHlGb3JtT3B0aW9ucywgRm9ybWx5RmllbGRDb25maWdDYWNoZSB9IGZyb20gJy4vZm9ybWx5LmZpZWxkLmNvbmZpZyc7XG5pbXBvcnQgeyBkZWZpbmVIaWRkZW5Qcm9wIH0gZnJvbSAnLi4vdXRpbHMnO1xuaW1wb3J0IHsgRmllbGRXcmFwcGVyIH0gZnJvbSAnLi4vdGVtcGxhdGVzL2ZpZWxkLndyYXBwZXInO1xuaW1wb3J0IHsgRmllbGRUeXBlIH0gZnJvbSAnLi4vdGVtcGxhdGVzL2ZpZWxkLnR5cGUnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICdmb3JtbHktZmllbGQnLFxuICB0ZW1wbGF0ZTogYDxuZy10ZW1wbGF0ZSAjY29udGFpbmVyPjwvbmctdGVtcGxhdGU+YCxcbiAgaG9zdDoge1xuICAgICdbc3R5bGUuZGlzcGxheV0nOiAnZmllbGQuaGlkZSA/IFwibm9uZVwiOlwiXCInLFxuICAgICdbY2xhc3NdJzogJ2ZpZWxkLmNsYXNzTmFtZT8gZmllbGQuY2xhc3NOYW1lIDogY2xhc3NOYW1lJyxcbiAgfSxcbn0pXG5leHBvcnQgY2xhc3MgRm9ybWx5RmllbGQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgRG9DaGVjaywgQWZ0ZXJDb250ZW50SW5pdCwgQWZ0ZXJDb250ZW50Q2hlY2tlZCwgQWZ0ZXJWaWV3SW5pdCwgQWZ0ZXJWaWV3Q2hlY2tlZCwgT25EZXN0cm95IHtcbiAgQElucHV0KCkgZmllbGQ6IEZvcm1seUZpZWxkQ29uZmlnO1xuICBASW5wdXQoJ2NsYXNzJykgY2xhc3NOYW1lOiBzdHJpbmcgPSAnJztcblxuICB3YXJuRGVwcmVjYXRpb24gPSBmYWxzZTtcblxuICBASW5wdXQoKSBzZXQgbW9kZWwobTogYW55KSB7XG4gICAgdGhpcy53YXJuRGVwcmVjYXRpb24gJiYgY29uc29sZS53YXJuKGBOZ3hGb3JtbHk6IHBhc3NpbmcgJ21vZGVsJyBpbnB1dCB0byAnJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9JyBjb21wb25lbnQgaXMgbm90IHJlcXVpcmVkIGFueW1vcmUsIHlvdSBtYXkgcmVtb3ZlIGl0IWApO1xuICB9XG5cbiAgQElucHV0KCkgc2V0IGZvcm0oZm9ybTogRm9ybUdyb3VwKSB7XG4gICAgdGhpcy53YXJuRGVwcmVjYXRpb24gJiYgY29uc29sZS53YXJuKGBOZ3hGb3JtbHk6IHBhc3NpbmcgJ2Zvcm0nIGlucHV0IHRvICcke3RoaXMuY29uc3RydWN0b3IubmFtZX0nIGNvbXBvbmVudCBpcyBub3QgcmVxdWlyZWQgYW55bW9yZSwgeW91IG1heSByZW1vdmUgaXQhYCk7XG4gIH1cblxuICBASW5wdXQoKSBzZXQgb3B0aW9ucyhvcHRpb25zOiBGb3JtbHlGb3JtT3B0aW9ucykge1xuICAgIHRoaXMud2FybkRlcHJlY2F0aW9uICYmIGNvbnNvbGUud2FybihgTmd4Rm9ybWx5OiBwYXNzaW5nICdvcHRpb25zJyBpbnB1dCB0byAnJHt0aGlzLmNvbnN0cnVjdG9yLm5hbWV9JyBjb21wb25lbnQgaXMgbm90IHJlcXVpcmVkIGFueW1vcmUsIHlvdSBtYXkgcmVtb3ZlIGl0IWApO1xuICB9XG5cbiAgQE91dHB1dCgpIG1vZGVsQ2hhbmdlOiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgLy8gVE9ETzogcmVtb3ZlIGBhbnlgLCBvbmNlIGRyb3BwaW5nIGFuZ3VsYXIgYFY3YCBzdXBwb3J0LlxuICBAVmlld0NoaWxkKCdjb250YWluZXInLCA8YW55PiB7cmVhZDogVmlld0NvbnRhaW5lclJlZiwgc3RhdGljOiB0cnVlIH0pIGNvbnRhaW5lclJlZjogVmlld0NvbnRhaW5lclJlZjtcblxuICByZWZzVW5zdWJzY3JpYmUgPSAoKSA9PiB7fTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIGZvcm1seUNvbmZpZzogRm9ybWx5Q29uZmlnLFxuICAgIHByaXZhdGUgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsXG4gICAgcHJpdmF0ZSBpbmplY3RvcjogSW5qZWN0b3IsXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lXG4gICAgQEF0dHJpYnV0ZSgnaGlkZS1kZXByZWNhdGlvbicpIGhpZGVEZXByZWNhdGlvbixcbiAgKSB7XG4gICAgdGhpcy53YXJuRGVwcmVjYXRpb24gPSBoaWRlRGVwcmVjYXRpb24gPT09IG51bGw7XG4gIH1cblxuICBuZ0FmdGVyQ29udGVudEluaXQoKSB7XG4gICAgdGhpcy50cmlnZ2VySG9vaygnYWZ0ZXJDb250ZW50SW5pdCcpO1xuICB9XG5cbiAgbmdBZnRlckNvbnRlbnRDaGVja2VkKCkge1xuICAgIHRoaXMudHJpZ2dlckhvb2soJ2FmdGVyQ29udGVudENoZWNrZWQnKTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICB0aGlzLnRyaWdnZXJIb29rKCdhZnRlclZpZXdJbml0Jyk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0NoZWNrZWQoKSB7XG4gICAgdGhpcy50cmlnZ2VySG9vaygnYWZ0ZXJWaWV3Q2hlY2tlZCcpO1xuICB9XG5cbiAgbmdEb0NoZWNrKCkge1xuICAgIHRoaXMudHJpZ2dlckhvb2soJ2RvQ2hlY2snKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMudHJpZ2dlckhvb2soJ29uSW5pdCcpO1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmIChjaGFuZ2VzLmZpZWxkKSB7XG4gICAgICB0aGlzLnJlZnNVbnN1YnNjcmliZSA9IHRoaXMucmVuZGVyRmllbGQodGhpcy5maWVsZCwgdGhpcy5jb250YWluZXJSZWYpO1xuICAgIH1cblxuICAgIHRoaXMudHJpZ2dlckhvb2soJ29uQ2hhbmdlcycsIGNoYW5nZXMpO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgdGhpcy50cmlnZ2VySG9vaygnb25EZXN0cm95Jyk7XG4gICAgdGhpcy5yZWZzVW5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVuZGVyRmllbGQoZjogRm9ybWx5RmllbGRDb25maWdDYWNoZSwgY29udGFpbmVyUmVmOiBWaWV3Q29udGFpbmVyUmVmKSB7XG4gICAgdGhpcy5yZWZzVW5zdWJzY3JpYmUoKTtcbiAgICAoZi53cmFwcGVycyB8fCBbXSkuZm9yRWFjaCh3cmFwcGVyID0+IHtcbiAgICAgIGNvbnRhaW5lclJlZiA9IHRoaXMuY3JlYXRlV3JhcHBlclJlZihmLCBjb250YWluZXJSZWYsIHRoaXMuZm9ybWx5Q29uZmlnLmdldFdyYXBwZXIod3JhcHBlcikpO1xuICAgIH0pO1xuXG4gICAgY29uc3QgcmVmID0gdGhpcy5mb3JtbHlDb25maWcuY3JlYXRlQ29tcG9uZW50KGYsIHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyLCB0aGlzLmluamVjdG9yKTtcbiAgICBpZiAocmVmKSB7XG4gICAgICBjb250YWluZXJSZWYuaW5zZXJ0KHJlZi5ob3N0Vmlldyk7XG4gICAgICB0aGlzLmF0dGFjaENvbXBvbmVudFJlZihyZWYsIGYpO1xuICAgIH1cblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAoZi5fY29tcG9uZW50UmVmcyB8fCBbXSkuZm9yRWFjaChjb21wb25lbnRSZWYgPT4gY29tcG9uZW50UmVmLmRlc3Ryb3koKSk7XG4gICAgICBmLl9jb21wb25lbnRSZWZzID0gW107XG4gICAgfTtcbiAgfVxuXG4gIHByaXZhdGUgdHJpZ2dlckhvb2sobmFtZTogc3RyaW5nLCBjaGFuZ2VzPzogU2ltcGxlQ2hhbmdlcykge1xuICAgIGlmICh0aGlzLmZpZWxkLmhvb2tzICYmIHRoaXMuZmllbGQuaG9va3NbbmFtZV0pIHtcbiAgICAgIGlmICghY2hhbmdlcyB8fCBjaGFuZ2VzLmZpZWxkKSB7XG4gICAgICAgIHRoaXMuZmllbGQuaG9va3NbbmFtZV0odGhpcy5maWVsZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZmllbGQubGlmZWN5Y2xlICYmIHRoaXMuZmllbGQubGlmZWN5Y2xlW25hbWVdKSB7XG4gICAgICB0aGlzLmZpZWxkLmxpZmVjeWNsZVtuYW1lXShcbiAgICAgICAgdGhpcy5maWVsZC5mb3JtLFxuICAgICAgICB0aGlzLmZpZWxkLFxuICAgICAgICB0aGlzLmZpZWxkLm1vZGVsLFxuICAgICAgICB0aGlzLmZpZWxkLm9wdGlvbnMsXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlV3JhcHBlclJlZjxUIGV4dGVuZHMgRmllbGRXcmFwcGVyPihcbiAgICBmaWVsZDogRm9ybWx5RmllbGRDb25maWdDYWNoZSxcbiAgICBjb250YWluZXJSZWY6IFZpZXdDb250YWluZXJSZWYsXG4gICAgY29uZmlnOiB7IGNvbXBvbmVudDogVHlwZTxUPjsgfSxcbiAgKSB7XG4gICAgY29uc3QgY2ZyID0gZmllbGQub3B0aW9ucyAmJiBmaWVsZC5vcHRpb25zLl9jb21wb25lbnRGYWN0b3J5UmVzb2x2ZXJcbiAgICAgID8gZmllbGQub3B0aW9ucy5fY29tcG9uZW50RmFjdG9yeVJlc29sdmVyXG4gICAgICA6IHRoaXMuY29tcG9uZW50RmFjdG9yeVJlc29sdmVyO1xuXG4gICAgY29uc3QgcmVmID0gY29udGFpbmVyUmVmLmNyZWF0ZUNvbXBvbmVudDxUPihjZnIucmVzb2x2ZUNvbXBvbmVudEZhY3RvcnkoY29uZmlnLmNvbXBvbmVudCkpO1xuICAgIHRoaXMuYXR0YWNoQ29tcG9uZW50UmVmKHJlZiwgZmllbGQpO1xuXG4gICAgaWYgKCFyZWYuaW5zdGFuY2UuZmllbGRDb21wb25lbnQpIHtcbiAgICAgIHRocm93IEVycm9yKGAke2NvbmZpZy5jb21wb25lbnQucHJvdG90eXBlLmNvbnN0cnVjdG9yLm5hbWV9I2ZpZWxkQ29tcG9uZW50OiBtaXNzaW5nICdzdGF0aWMnIGZsYWcgZm9yICdAVmlld0NoaWxkJyBxdWVyeSwgaXQgc2hvdWxkIGJlIGV4cGxpY2l0bHkgZGVmaW5lZCBieSAnQFZpZXdDaGlsZCguLi4sIHsgc3RhdGljOiB0cnVlIH0pJy5gKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVmLmluc3RhbmNlLmZpZWxkQ29tcG9uZW50O1xuICB9XG5cbiAgcHJpdmF0ZSBhdHRhY2hDb21wb25lbnRSZWY8VCBleHRlbmRzIEZpZWxkVHlwZT4ocmVmOiBDb21wb25lbnRSZWY8VD4sIGZpZWxkOiBGb3JtbHlGaWVsZENvbmZpZ0NhY2hlKSB7XG4gICAgaWYgKGZpZWxkLl9jb21wb25lbnRSZWZzKSB7XG4gICAgICBmaWVsZC5fY29tcG9uZW50UmVmcy5wdXNoKHJlZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmluZUhpZGRlblByb3AoZmllbGQsICdfY29tcG9uZW50UmVmcycsIFtyZWZdKTtcbiAgICB9XG4gICAgT2JqZWN0LmFzc2lnbihyZWYuaW5zdGFuY2UsIHsgZmllbGQgfSk7XG4gIH1cbn1cbiJdfQ==