{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@ngx-formly/core/lib/utils.ts","ng://@ngx-formly/core/lib/services/formly.config.ts","ng://@ngx-formly/core/lib/services/formly.form.builder.ts","ng://@ngx-formly/core/lib/components/formly.form.ts","ng://@ngx-formly/core/lib/components/formly.field.ts","ng://@ngx-formly/core/lib/components/formly.attributes.ts","ng://@ngx-formly/core/lib/templates/field.type.ts","ng://@ngx-formly/core/lib/extensions/field-form/utils.ts","ng://@ngx-formly/core/lib/templates/field-array.type.ts","ng://@ngx-formly/core/lib/templates/field.wrapper.ts","ng://@ngx-formly/core/lib/templates/formly.group.ts","ng://@ngx-formly/core/lib/templates/formly.validation-message.ts","ng://@ngx-formly/core/lib/templates/field-template.type.ts","ng://@ngx-formly/core/lib/extensions/field-expression/utils.ts","ng://@ngx-formly/core/lib/extensions/field-expression/field-expression.ts","ng://@ngx-formly/core/lib/extensions/field-validation/field-validation.ts","ng://@ngx-formly/core/lib/extensions/field-form/field-form.ts","ng://@ngx-formly/core/lib/extensions/core/core.ts","ng://@ngx-formly/core/lib/core.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__read","o","m","Symbol","iterator","r","e","ar","next","done","push","value","error","__spread","concat","getKeyPath","field","key","_keyPath","indexOf","replace","path","split","slice","FORMLY_VALIDATORS","assignModelValue","model","paths","isObject","test","clone","getFieldValue","parent","_b","__values","tslib_1.__values","_c","reverseDeepMerge","dest","args","_i","forEach","src","srcArg","isNullOrUndefined","obj1","obj2","getPrototypeOf","isArray","undefined","isUndefined","x","RegExp","Observable","changingThisBreaksApplicationSecurity","AbstractControl","Date","getTime","map","v","proto","c","keys","reduce","newVal","prop","propDescriptor","getOwnPropertyDescriptor","get","defineProperty","defineHiddenProp","defaultValue","enumerable","writable","configurable","wrapProperty","setFn","set","FORMLY_CONFIG","InjectionToken","FormlyConfig","types","validators","wrappers","messages","templateManipulators","preWrapper","postWrapper","extras","checkExpressionOn","showError","formControl","invalid","touched","options","parentForm","submitted","validation","show","extensions","addConfig","config","_this","type","setType","validator","setValidator","wrapper","setWrapper","manipulators","console","warn","manipulator","setManipulator","validationMessages","addValidatorMessage","name","message","extension","option","component","extends","defaultOptions","setTypeWrapper","getType","Error","mergeExtendedType","getMergedField","extendDefaults","optionsTypes","componentRef","createComponent","instance","resolver","injector","cf","_componentFactory","hostView","destroyed","_componentFactoryResolver","getFieldInjector","resolveComponentFactory","getWrapper","getValidator","getValidatorMessage","class","method","extendedType","_injector","Injectable","providedIn","FormlyFormBuilder","formlyConfig","componentFactoryResolver","buildForm","fieldGroup","core","_buildForm","_setOptions","getExtensions","prePopulate","onPopulate","f","postPopulate","formState","fieldChanges","Subject","_markForCheck","_componentRefs","ref","changeDetectorRef","markForCheck","ComponentFactoryResolver","Injector","FormlyForm","formlyBuilder","immutable","parentFormGroup","modelChange","EventEmitter","modelChangeSubs","enableCheckExprDebounce","checkExpressionChange$","pipe","debounceTime","subscribe","checkExpressionChange","_model","_fields","fields","_options","ngDoCheck","ngOnChanges","changes","form","FormGroup","setOptions","clearModelSubscriptions","trackModelChanges","updateInitialValue","ngOnDestroy","unsubscribe","changeModel","event","emit","resetModel","initialModel","k","control","resetForm","reset","oldVal","emitModelChange","_checkField","rootKey","valueChanges","modelOptions","debounce","default","parsers","parserFn","tslib_1.__spread","join","sub","Component","selector","template","providers","Attribute","FormGroupDirective","decorators","Optional","Input","Output","FormlyField","hideDeprecation","className","warnDeprecation","refsUnsubscribe","ngAfterContentInit","triggerHook","ngAfterContentChecked","ngAfterViewInit","ngAfterViewChecked","ngOnInit","renderField","containerRef","createWrapperRef","insert","attachComponentRef","destroy","hooks","lifecycle","cfr","fieldComponent","host","[style.display]","[class]","ViewChild","read","ViewContainerRef","static","FormlyAttributes","renderer","elementRef","_document","uiAttributesCache","uiAttributes","document","templateOptions","setAttribute","nativeElement","id","to","attributes","oldValue","attr","removeAttribute","attachAttrElement","fieldAttrElements","element","focusElement","detachAttrElement","focus","isFocused","activeElement","some","contains","blur","onFocus","$event","onBlur","onChange","change","markAsDirty","index","findIndex","splice","Directive","[attr.name]","[attr.step]","(focus)","(blur)","(keyup)","(keydown)","(click)","(change)","(keypress)","Renderer2","ElementRef","Inject","DOCUMENT","FieldType","Field","_super","tslib_1.__extends","registerControl","disabled","enabled","disable","enable","FormControl","patchValue","setControl","FieldArrayType","builder","removeAt","fieldArray","FormArray","_validators","asyncValidators","_asyncValidators","updateOn","add","remove","FieldWrapper","FormlyGroup","FormlyValidationMessage","fieldForm","errors","errorPath","FormlyTemplateType","evalExpression","expression","thisArg","argVal","Function","FieldExpressionExtension","ignoreCache","_expressionProperties","expressionProperties","expressionProperty","expressionValueSetter","evalExpressionValueSetter","argNames","isFunction","this_1","_evalExpression","subscription_1","onDestroy_1","onDestroy","hideExpression","hide","parent_1","parentExpression","evalStringExpression","checkFieldExpressionChange","checkFieldVisibilityChange","expressionValue","JSON","stringify","updateValueAndValidity","emitEvent","hideExpressionResult","hidden","toggleFormControl","filter","unregisterControl","controls","setParent","removeControl","FieldValidationExtension","initFieldValidation","getPredefinedFieldValidation","validatorName","wrapNgValidatorFn","Validators","compose","composeAsync","asyncValidator","opt","required","pattern","minLength","maxLength","min","max","validatorFn","isValid","isPromise","obj","then","result","handleResult","_a","controlErrors","setErrors","_d","FieldFormExtension","addFormControl","controlOptions","setValidators","setAsyncValidators","createControl","CoreExtension","formId","getFieldComponentInstance","fieldTransforms","fieldTransform","initFieldOptions","root","getFieldId","label","placeholder","initFieldWrappers","fieldTemplateManipulators","el","a","defaultFormlyConfig","FormlyModule","configService","configs","forRoot","ngModule","provide","multi","useFactory","deps","useValue","ANALYZE_FOR_ENTRY_COMPONENTS","forChild","NgModule","declarations","entryComponents","exports","imports","CommonModule"],"mappings":"ogBAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAG5B,SAAgBO,EAAUR,EAAGC,GAEzB,SAASQ,IAAOC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,GAG5E,IAAIK,EAAW,WAQlB,OAPAA,EAAWZ,OAAOa,QAAU,SAAkBC,GAC1C,IAAK,IAAIC,EAAGC,EAAI,EAAGC,EAAIC,UAAUC,OAAQH,EAAIC,EAAGD,IAE5C,IAAK,IAAIZ,KADTW,EAAIG,UAAUF,GACOhB,OAAOU,UAAUL,eAAee,KAAKL,EAAGX,KAAIU,EAAEV,GAAKW,EAAEX,IAE9E,OAAOU,IAEKO,MAAMb,KAAMU,YAkFhC,SAAgBI,EAAOC,EAAGN,GACtB,IAAIO,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UACjD,IAAKF,EAAG,OAAOD,EACf,IAAmBI,EAAYC,EAA3BZ,EAAIQ,EAAEJ,KAAKG,GAAOM,EAAK,GAC3B,IACI,WAAc,IAANZ,GAAsB,EAANA,QAAcU,EAAIX,EAAEc,QAAQC,MAAMF,EAAGG,KAAKL,EAAEM,OAExE,MAAOC,GAASN,EAAI,CAAEM,MAAOA,WAEzB,IACQP,IAAMA,EAAEI,OAASP,EAAIR,EAAU,YAAIQ,EAAEJ,KAAKJ,WAExC,GAAIY,EAAG,MAAMA,EAAEM,OAE7B,OAAOL,EAGX,SAAgBM,IACZ,IAAK,IAAIN,EAAK,GAAIb,EAAI,EAAGA,EAAIE,UAAUC,OAAQH,IAC3Ca,EAAKA,EAAGO,OAAOd,EAAOJ,UAAUF,KACpC,OAAOa,EC/HX,SAAgBQ,EAAWC,GACzB,IAAKA,EAAMC,IACT,MAAO,GAIT,IAAKD,EAAME,UAAYF,EAAME,SAASD,MAAQD,EAAMC,IAAK,KACjDA,GAAkC,IAA5BD,EAAMC,IAAIE,QAAQ,KAC1BH,EAAMC,IACND,EAAMC,IAAIG,QAAQ,aAAc,OAEpCJ,EAAME,SAAW,CAAED,IAAKD,EAAMC,IAAKI,MAA4B,IAAtBJ,EAAIE,QAAQ,KAAcF,EAAIK,MAAM,KAAO,CAACL,IAGvF,OAAOD,EAAME,SAASG,KAAKE,MAAM,GAGnC,IAAaC,EAAoB,CAAC,WAAY,UAAW,YAAa,YAAa,MAAO,OAE1F,SAAgBC,EAAiBC,EAAYC,EAAiBhB,GAC5D,IAAK,IAAIjB,EAAI,EAAGA,EAAKiC,EAAM9B,OAAS,EAAIH,IAAK,KACrC2B,EAAOM,EAAMjC,GACdgC,EAAML,IAAUO,EAASF,EAAML,MAClCK,EAAML,GAAQ,QAAQQ,KAAKF,EAAMjC,EAAI,IAAM,GAAK,IAGlDgC,EAAQA,EAAML,GAGhBK,EAAMC,EAAMA,EAAM9B,OAAS,IAAMiC,EAAMnB,GAGzC,SAAgBoB,EAAcf,WACxBU,EAAQV,EAAMgB,OAAON,UACzB,IAAmB,IAAAO,EDNrB,SAoEgBC,EAASjC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UAAWV,EAAI,EAChE,OAAIQ,EAAUA,EAAEJ,KAAKG,GACd,CACHO,KAAM,WAEF,OADIP,GAAKP,GAAKO,EAAEJ,SAAQI,OAAI,GACrB,CAAEU,MAAOV,GAAKA,EAAEP,KAAMe,MAAOR,KCpE3BkC,CAAApB,EAAWC,IAAMoB,EAAAH,EAAAzB,QAAA4B,EAAA3B,KAAA2B,EAAAH,EAAAzB,OAAE,CAAjC,IAAMa,EAAIe,EAAAzB,MACb,IAAKe,EACH,OAAOA,EAETA,EAAQA,EAAML,wGAGhB,OAAOK,EAGT,SAAgBW,EAAiBC,OAAW,IAAAC,EAAA,GAAAC,EAAA,EAAAA,EAAA5C,UAAAC,OAAA2C,IAAAD,EAAAC,EAAA,GAAA5C,UAAA4C,GAU1C,OATAD,EAAKE,QAAO,SAACC,GACX,IAAK,IAAIC,KAAUD,EACbE,EAAkBN,EAAKK,KAmBd,KAnBwCL,EAAKK,GACxDL,EAAKK,GAAUb,EAAMY,EAAIC,KAyBFE,EAxBCP,EAAKK,GAwBKG,EAxBIJ,EAAIC,GAyBzCf,EAASiB,IAASjB,EAASkB,IAC7BpE,OAAOqE,eAAeF,KAAUnE,OAAOqE,eAAeD,KACpDjE,MAAMmE,QAAQH,KAAShE,MAAMmE,QAAQF,IA1BtCT,EAAiBC,EAAKK,GAASD,EAAIC,KAuB3C,IAA+BE,EAAWC,IAnBjCR,EAGT,SAAgBM,EAAkBjC,GAChC,OAAOA,IAAUsC,WAAuB,OAAVtC,EAGhC,SAAgBuC,EAAYvC,GAC1B,OAAOA,IAAUsC,UAiBnB,SAAgBrB,EAASuB,GACvB,OAAY,MAALA,GAA0B,iBAANA,EAO7B,SAAgBrB,EAAMnB,GACpB,IAAKiB,EAASjB,IAAUA,aAAiByC,QAAUzC,aAAiB0C,EAAAA,YAA4C1C,EAAM2C,sCACpH,OAAO3C,EAGT,GAAIA,aAAiB4C,EAAAA,gBACnB,OAAO,KAGT,GAAI5C,aAAiB6C,KACnB,OAAO,IAAIA,KAAK7C,EAAM8C,WAGxB,GAAI5E,MAAMmE,QAAQrC,GAChB,OAAOA,EAAMY,MAAM,GAAGmC,IAAG,SAACC,GAAK,OAAA7B,EAAM6B,SAKjCC,EAAQlF,OAAOqE,eAAepC,GAChCkD,EAAInF,OAAOW,OAAOuE,GAItB,OAHAC,EAAInF,OAAOC,eAAekF,EAAGD,GAGtBlF,OAAOoF,KAAKnD,GAAOoD,OAAM,SAAEC,EAAQC,OAClCC,EAAiBxF,OAAOyF,yBAAyBxD,EAAOsD,GAQ9D,OANIC,EAAeE,IACjB1F,OAAO2F,eAAeL,EAAQC,EAAI3E,EAAA,GAAO4E,EAAc,CAAEE,IAAG,WAAQ,OAAAtC,EAAMnB,EAAMsD,QAEhFD,EAAOC,GAAQnC,EAAMnB,EAAMsD,IAGtBD,GACNH,GAGL,SAAgBS,EAAiBtD,EAAYiD,EAAcM,GACzD7F,OAAO2F,eAAerD,EAAOiD,EAAM,CAAEO,YAAY,EAAOC,UAAU,EAAMC,cAAc,IACtF1D,EAAMiD,GAAQM,EAGhB,SAAgBI,EAAsB3D,EAAOiD,EAAMW,OAC7CjE,EAAQK,EAAMiD,GAClBW,EAAMjE,GAENjC,OAAO2F,eAAerD,EAAOiD,EAAM,CACjCS,cAAc,EACdN,IAAG,WAAQ,OAAAzD,GACXkE,IAAG,SAAEb,GACCA,IAAWrD,IACbiE,EAAMZ,EAAQrD,GACdA,EAAQqD,MCjJhB,IAAac,EAAgB,IAAIC,EAAAA,eAA6B,iBAY9DC,EAAA,WAAA,SAAAA,IAEE9F,KAAA+F,MAAsC,GACtC/F,KAAAgG,WAAkD,GAClDhG,KAAAiG,SAA8C,GAC9CjG,KAAAkG,SAA6F,GAC7FlG,KAAAmG,qBAGI,CACFC,WAAY,GACZC,YAAa,IAEfrG,KAAAsG,OAAiC,CAC/BC,kBAAmB,uBACnBC,UAAS,SAAW1E,GAClB,OAAOA,EAAM2E,aAAe3E,EAAM2E,YAAYC,UAAY5E,EAAM2E,YAAYE,SAAY7E,EAAM8E,QAAQC,YAAc/E,EAAM8E,QAAQC,WAAWC,WAAehF,EAAMA,MAAMiF,YAAcjF,EAAMA,MAAMiF,WAAWC,QAGjNhH,KAAAiH,WAAkD,UAElDnB,EAAA5F,UAAAgH,UAAA,SAAUC,GAAV,IAAAC,EAAApH,KACMmH,EAAOpB,OACToB,EAAOpB,MAAMxC,QAAO,SAAC8D,GAAQ,OAAAD,EAAKE,QAAQD,KAExCF,EAAOnB,YACTmB,EAAOnB,WAAWzC,QAAO,SAACgE,GAAa,OAAAH,EAAKI,aAAaD,KAEvDJ,EAAOlB,UACTkB,EAAOlB,SAAS1C,QAAO,SAACkE,GAAW,OAAAL,EAAKM,WAAWD,KAEjDN,EAAOQ,eACTC,QAAQC,KAAK,yFACbV,EAAOQ,aAAapE,QAAO,SAACuE,GAAe,OAAAV,EAAKW,eAAeD,MAE7DX,EAAOa,oBACTb,EAAOa,mBAAmBzE,QAAO,SAACwD,GAAc,OAAAK,EAAKa,oBAAoBlB,EAAWmB,KAAMnB,EAAWoB,WAEnGhB,EAAOF,YACTE,EAAOF,WAAW1D,QAAO,SAACoB,GAAK,OAAAyC,EAAKH,WAAWtC,EAAEuD,MAAQvD,EAAEyD,YAEzDjB,EAAOb,SACTtG,KAAKsG,OAAMlG,EAAA,GAAQJ,KAAKsG,OAAWa,EAAOb,UAI9CR,EAAA5F,UAAAoH,QAAA,SAAQV,GAAR,IAAAQ,EAAApH,KACML,MAAMmE,QAAQ8C,GAChBA,EAAQrD,QAAO,SAAE8E,GAAW,OAAAjB,EAAKE,QAAQe,MAEpCrI,KAAK+F,MAAMa,EAAQsB,QACtBlI,KAAK+F,MAAMa,EAAQsB,MAAK,IAE1BlI,KAAK+F,MAAMa,EAAQsB,MAAMI,UAAY1B,EAAQ0B,UAC7CtI,KAAK+F,MAAMa,EAAQsB,MAAMA,KAAOtB,EAAQsB,KACxClI,KAAK+F,MAAMa,EAAQsB,MAAMK,WAAU3B,EAAQ2B,WAC3CvI,KAAK+F,MAAMa,EAAQsB,MAAMM,eAAiB5B,EAAQ4B,eAC9C5B,EAAQX,UACVW,EAAQX,SAAS1C,QAAO,SAAEkE,GAAY,OAAAL,EAAKqB,eAAe7B,EAAQsB,KAAMT,OAK9E3B,EAAA5F,UAAAwI,QAAA,SAAQR,GACN,IAAKlI,KAAK+F,MAAMmC,GACd,MAAM,IAAIS,MAAM,mDAAmDT,EAAI,KAKzE,OAFAlI,KAAK4I,kBAAkBV,GAEhBlI,KAAK+F,MAAMmC,IAGpBpC,EAAA5F,UAAA2I,eAAA,SAAe/G,GAAf,IAAAsF,EAAApH,UAAe,IAAA8B,IAAAA,EAAA,QACPuF,EAAOrH,KAAK0I,QAAQ5G,EAAMuF,MAC5BA,EAAKmB,gBACPrF,EAAiBrB,EAAOuF,EAAKmB,oBAGzBM,EAAiBzB,EAAKkB,YAAWvI,KAAK0I,QAAQrB,EAAKkB,YAASC,eAC9DM,GACF3F,EAAiBrB,EAAOgH,GAGtBhH,GAASA,EAAMiH,cACjBjH,EAAMiH,aAAaxF,QAAO,SAAC8E,OACnBG,EAAiBpB,EAAKsB,QAAQL,GAAQG,eACxCA,GACFrF,EAAiBrB,EAAO0G,SAKxBQ,EAAehJ,KAAKiJ,gBAAgBnH,GACtCkH,GAAgBA,EAAaE,UAAYF,EAAaE,SAASV,gBACjErF,EAAiBrB,EAAOkH,EAAaE,SAASV,iBAG3C1G,EAAMmE,UAAYoB,EAAKpB,WAC1BnE,EAAMmE,SAAQtE,EAAO0F,EAAKpB,YAK9BH,EAAA5F,UAAA+I,gBAAA,SACEnH,EACAqH,EACAC,GAEA,QAJA,IAAAtH,IAAAA,EAAA,IAIKA,EAAMuF,KAAX,KAIMgC,EAAKvH,EAAMwH,kBACjB,GAAID,GAAMvH,EAAMuF,OAASgC,EAAGhC,MAASgC,EAAGL,cAAgBK,EAAGL,aAAaO,WAAaF,EAAGL,aAAaO,SAASC,UAC5G,OAAO1H,EAAMwH,kBAAkBN,iBAG3B3B,EAAOrH,KAAK0I,QAAQ5G,EAAMuF,MAgBhC,OAfK8B,IACHA,EAAWrH,EAAMgB,OAAO8D,QAAQ6C,2BAE7BL,IACHA,EAAWpJ,KAAK0J,iBAAiB5H,IAGnCsD,EAAiBtD,EAAO,oBAAqB,CAC3CuF,KAAMvF,EAAMuF,KACZiB,UAAWjB,EAAKiB,UAChBU,aAAcG,EACVA,EAASQ,wBAAwBtC,EAAKiB,WAAWnI,OAAOiJ,GACxD,OAGCtH,EAAMwH,kBAAkBN,eAGjClD,EAAA5F,UAAAwH,WAAA,SAAWd,GAAX,IAAAQ,EAAApH,MACEA,KAAKiG,SAASW,EAAQsB,MAAQtB,GAClBb,OACVa,EAAQb,MAAMxC,QAAO,SAAE8D,GACrBD,EAAKqB,eAAepB,EAAMT,EAAQsB,SAKxCpC,EAAA5F,UAAA0J,WAAA,SAAW1B,GACT,IAAKlI,KAAKiG,SAASiC,GACjB,MAAM,IAAIS,MAAM,sDAAsDT,EAAI,KAG5E,OAAOlI,KAAKiG,SAASiC,IAGvBpC,EAAA5F,UAAAuI,eAAA,SAAepB,EAAca,GACtBlI,KAAK+F,MAAMsB,KACdrH,KAAK+F,MAAMsB,GAAK,IAEbrH,KAAK+F,MAAMsB,GAAMpB,WACpBjG,KAAK+F,MAAMsB,GAAMpB,SAAW,KAEmB,IAA7CjG,KAAK+F,MAAMsB,GAAMpB,SAAShE,QAAQiG,IACpClI,KAAK+F,MAAMsB,GAAMpB,SAASzE,KAAK0G,IAInCpC,EAAA5F,UAAAsH,aAAA,SAAaZ,GACX5G,KAAKgG,WAAWY,EAAQsB,MAAQtB,GAGlCd,EAAA5F,UAAA2J,aAAA,SAAa3B,GACX,IAAKlI,KAAKgG,WAAWkC,GACnB,MAAM,IAAIS,MAAM,wDAAwDT,EAAI,KAG9E,OAAOlI,KAAKgG,WAAWkC,IAGzBpC,EAAA5F,UAAA+H,oBAAA,SAAoBC,EAAcC,GAChCnI,KAAKkG,SAASgC,GAAQC,GAGxBrC,EAAA5F,UAAA4J,oBAAA,SAAoB5B,GAClB,OAAOlI,KAAKkG,SAASgC,IAGvBpC,EAAA5F,UAAA6H,eAAA,SAAeD,IACb,IAAIA,EAAYiC,UAAQjC,EAAYkC,QAAQhK,OAGtC8F,EAAA5F,UAAA0I,kBAAR,SAA0BV,GACxB,GAAKlI,KAAK+F,MAAMmC,GAAMK,WAAtB,KAIM0B,EAAejK,KAAK0I,QAAQ1I,KAAK+F,MAAMmC,GAAMK,YAC9CvI,KAAK+F,MAAMmC,GAAMI,YACpBtI,KAAK+F,MAAMmC,GAAMI,UAAY2B,EAAa3B,WAGvCtI,KAAK+F,MAAMmC,GAAMjC,WACpBjG,KAAK+F,MAAMmC,GAAMjC,SAAWgE,EAAahE,YAIrCH,EAAA5F,UAAAwJ,iBAAR,SAAyB5H,QAAA,IAAAA,IAAAA,EAAA,QACjBgB,EAAShB,EAAMgB,OACrB,OAAIA,EAAOwG,mBAAqBxG,EAAOwG,kBAAkBN,aAChDlG,EAAOwG,kBAAkBN,aAAaI,SAGxCtG,EAAO8D,QAAQsD,+BAnNzBC,EAAAA,WAAU9G,KAAA,CAAC,CAAE+G,WAAY,gHAA1B,GClBAC,EAAA,WASE,SAAAA,EACUC,EACAC,EACAnB,GAFApJ,KAAAsK,aAAAA,EACAtK,KAAAuK,yBAAAA,EACAvK,KAAAoJ,SAAAA,SAGViB,EAAAnK,UAAAsK,UAAA,SAAU/D,EAAoCgE,EAAsCjI,EAAYoE,GAC9F,QAD4C,IAAA6D,IAAAA,EAAA,KACvCzK,KAAKsK,aAAarD,WAAWyD,KAChC,MAAM,IAAI/B,MAAM,6FAGlB3I,KAAK2K,WAAW,CAAEF,WAAUA,EAAEjI,MAAKA,EAAEiE,YAAWA,EAAEG,QAAS5G,KAAK4K,YAAYhE,MAGtEyD,EAAAnK,UAAAyK,WAAR,SAAmB7I,GAAnB,IAAAsF,EAAApH,KACEA,KAAK6K,gBAAgBtH,QAAO,SAAC6E,GAAa,OAAAA,EAAU0C,aAAe1C,EAAU0C,YAAYhJ,KACzF9B,KAAK6K,gBAAgBtH,QAAO,SAAC6E,GAAa,OAAAA,EAAU2C,YAAc3C,EAAU2C,WAAWjJ,KAEnFA,EAAM2I,YACR3I,EAAM2I,WAAWlH,QAAO,SAAEyH,GAAM,OAAA5D,EAAKuD,WAAWK,KAGlDhL,KAAK6K,gBAAgBtH,QAAO,SAAC6E,GAAa,OAAAA,EAAU6C,cAAgB7C,EAAU6C,aAAanJ,MAGrFuI,EAAAnK,UAAA2K,cAAR,WAAA,IAAAzD,EAAApH,KACE,OAAOR,OAAOoF,KAAK5E,KAAKsK,aAAarD,YAAYzC,IAAG,SAAC0D,GAAQ,OAAAd,EAAKkD,aAAarD,WAAWiB,MAGpFmC,EAAAnK,UAAA0K,YAAR,SAAoBhE,GAgClB,OA/BAA,EAAUA,GAAW,IACbsE,UAAYtE,EAAQsE,WAAa,GAEpCtE,EAAQJ,YACXI,EAAQJ,UAAYxG,KAAKsK,aAAahE,OAAOE,WAG1CI,EAAQuE,cACX/F,EAAiBwB,EAAS,eAAgB,IAAIwE,EAAAA,SAG3CxE,EAAQ6C,2BACXrE,EAAiBwB,EAAS,4BAA6B5G,KAAKuK,0BAGzD3D,EAAQsD,WACX9E,EAAiBwB,EAAS,YAAa5G,KAAKoJ,UAGzCxC,EAAQyE,gBACXzE,EAAQyE,cAAa,SAAIvJ,GACnBA,EAAMwJ,gBACRxJ,EAAMwJ,eAAe/H,QAAO,SAACgI,GAAO,OAAAA,EAAIC,kBAAkBC,iBAGxD3J,EAAM2I,YACR3I,EAAM2I,WAAWlH,QAAO,SAACyH,GAAK,OAAApE,EAAQyE,cAAcL,OAKnDpE,uBA/DVuD,EAAAA,WAAU9G,KAAA,CAAC,CAAE+G,WAAY,oDALjBtE,SAFY4F,EAAAA,gCAA0BC,EAAAA,wLAA/C,gBCwDE,SAAAC,EACUC,EACAvB,EAEgBwB,EACJC,GALtB,IAAA3E,EAAApH,KACUA,KAAA6L,cAAAA,EACA7L,KAAAsK,aAAAA,EAGYtK,KAAA+L,gBAAAA,EAvBZ/L,KAAAgM,YAAc,IAAIC,EAAAA,aAEpBjM,KAAA8L,WAAY,EAKZ9L,KAAAkM,gBAAkC,GAElClM,KAAAmM,yBAA0B,EAC1BnM,KAAAoM,uBAAyBpM,KAAKgM,YAAYK,KAChDC,EAAAA,aAAatM,KAAKmM,wBAA0B,IAAM,IAClDI,UAAS,WACTnF,EAAK+E,yBAA0B,EAC/B/E,EAAKoF,wBACLpF,EAAK+E,yBAA0B,IAU/BnM,KAAK8L,UAA2B,OAAdA,KAAyBxB,EAAahE,OAAOwF,UA2HnE,OAhKEtM,OAAA2F,eACIyG,EAAA1L,UAAA,QAAK,KACT,WAAc,OAAOF,KAAKyM,QAAU,QAFpC,SACUjK,GAAcxC,KAAKyM,OAASzM,KAAK8L,UAAYlJ,EAAMJ,GAASA,mCAGtEhD,OAAA2F,eACIyG,EAAA1L,UAAA,SAAM,KACV,WAAe,OAAOF,KAAK0M,SAAW,QAFtC,SACWC,GAA+B3M,KAAK0M,QAAU1M,KAAK8L,UAAYlJ,EAAM+J,GAAUA,mCAG1FnN,OAAA2F,eACIyG,EAAA1L,UAAA,UAAO,KACX,WAAgB,OAAOF,KAAK4M,cAF5B,SACYhG,GAA8B5G,KAAK4M,SAAW5M,KAAK8L,UAAYlJ,EAAMgE,GAAWA,mCA+B5FgF,EAAA1L,UAAA2M,UAAA,WACqD,yBAA/C7M,KAAKsK,aAAahE,OAAOC,mBAC3BvG,KAAKwM,yBAITZ,EAAA1L,UAAA4M,YAAA,SAAYC,IACNA,EAAQJ,QAAUI,EAAQC,MAAQD,EAAQvK,SAC5CxC,KAAKgN,KAAOhN,KAAKgN,MAAI,IAASC,EAAAA,UAAU,IACxCjN,KAAKkN,aACLlN,KAAKmN,0BACLnN,KAAK6L,cAAcrB,UAAUxK,KAAKgN,KAAMhN,KAAK2M,OAAQ3M,KAAKwC,MAAOxC,KAAK4G,SACtE5G,KAAKoN,kBAAkBpN,KAAK2M,QAC5B3M,KAAK4G,QAAQyG,uBAIjBzB,EAAA1L,UAAAoN,YAAA,WACEtN,KAAKmN,0BACLnN,KAAKoM,uBAAuBmB,eAG9B3B,EAAA1L,UAAAsN,YAAA,SAAYC,GACVlL,EAAiBvC,KAAKwC,MAAOiL,EAAM1L,IAAIK,MAAM,KAAMqL,EAAMhM,OACzDzB,KAAKgM,YAAY0B,KAAK9K,EAAM5C,KAAKwC,SAGnCoJ,EAAA1L,UAAAgN,WAAA,WAAA,IAAA9F,EAAApH,KACOA,KAAK4G,UACR5G,KAAK4G,QAAU,IAGZ5G,KAAK4G,QAAQ+G,aAChB3N,KAAK4G,QAAQ+G,WAAU,SAAInL,GACzBA,EAAQkB,EAAkBlB,GAAS4E,EAAKwG,aAAepL,EACnD4E,EAAK5E,QACPhD,OAAOoF,KAAKwC,EAAK5E,OAAOe,QAAO,SAACsK,GAAK,cAAOzG,EAAK5E,MAAMqL,KACvDrO,OAAOa,OAAO+G,EAAK5E,MAAOA,GAAS,KAGX4E,EAAY,QAAEuD,aAIpCvD,EAAKR,QAAQC,YAAcO,EAAKR,QAAQC,WAAWiH,UAAY1G,EAAK4F,KACtE5F,EAAKR,QAAQC,WAAWkH,UAAUvL,GAElC4E,EAAK4F,KAAKgB,MAAMxL,MAKjBxC,KAAK4G,QAAQC,YAAc7G,KAAK+L,kBACnC3G,EAAiBpF,KAAK4G,QAAS,aAAc5G,KAAK+L,iBAClDtG,EAAazF,KAAK4G,QAAQC,WAAY,YAAW,SAAG/B,EAAQmJ,GACtDnJ,MAAamJ,GACW7G,EAAY,QAAEiE,cAAc,CACpDZ,WAAYrD,EAAKuF,OACjBnK,MAAO4E,EAAK5E,MACZiE,YAAaW,EAAK4F,KAClBpG,QAASQ,EAAKR,aAMjB5G,KAAK4G,QAAQyG,qBAChBrN,KAAK4G,QAAQyG,mBAAkB,WAAS,OAAAjG,EAAKwG,aAAehL,EAAMwE,EAAK5E,SAG1CxC,KAAY,QAAE2K,aACjB3K,KAAY,QAAE2K,WAAU,SAAIuD,QAAA,IAAAA,IAAAA,GAAA,GACpD9G,EAAK+F,0BACL/F,EAAKyE,cAAcrB,UAAUpD,EAAK4F,KAAM5F,EAAKuF,OAAQvF,EAAK5E,MAAO4E,EAAKR,SACtEQ,EAAKgG,kBAAkBhG,EAAKuF,QAExBuB,GACF9G,EAAK4E,YAAY0B,KAAK9K,EAAMwE,EAAK5E,WAMjCoJ,EAAA1L,UAAAsM,sBAAR,WACMxM,KAAK4G,SAAqC5G,KAAY,QAAEmO,aAChCnO,KAAY,QAAEmO,YAAY,CAClD1D,WAAYzK,KAAK2M,OACjBnK,MAAOxC,KAAKwC,MACZiE,YAAazG,KAAKgN,KAClBpG,QAAS5G,KAAK4G,WAKZgF,EAAA1L,UAAAkN,kBAAR,SAA0BT,EAA6ByB,GAAvD,IAAAhH,EAAApH,UAAuD,IAAAoO,IAAAA,EAAA,IACrDzB,EAAOpJ,QAAO,SAACzB,GACb,GAAIA,EAAMC,MAAQD,EAAM2I,WAAY,KAC5B4D,EAAevM,EAAMwM,aAAaC,UAAYzM,EAAMwM,aAAaC,SAASC,WAC5E1M,EAAM2E,YAAY4H,aAAahC,KAAKC,EAAAA,aAAaxK,EAAMwM,aAAaC,SAASC,aAC7E1M,EAAM2E,YAAY4H,aAEtBjH,EAAK8E,gBAAgB1K,KAAK6M,EAAa9B,UAAS,SAAC9K,GAC3CK,EAAM2M,SAAkC,EAAvB3M,EAAM2M,QAAQ9N,QACjCmB,EAAM2M,QAAQlL,QAAO,SAACmL,GAAY,OAAAjN,EAAQiN,EAASjN,KAGrD2F,EAAKoG,YAAY,CAAEzL,IAAK4M,EAAIP,EAAO,CAAEtM,EAAMC,MAAK6M,KAAK,KAAMnN,MAAKA,OAIhEK,EAAM2I,YAAwC,EAA1B3I,EAAM2I,WAAW9J,QACvCyG,EAAKgG,kBAAkBtL,EAAM2I,WAAY3I,EAAMC,IAAGJ,EAAOyM,EAAO,CAAEtM,EAAMC,MAAOqM,MAK7ExC,EAAA1L,UAAAiN,wBAAR,WACEnN,KAAKkM,gBAAgB3I,QAAO,SAACsL,GAAO,OAAAA,EAAItB,gBACxCvN,KAAKkM,gBAAkB,wBA/K1B4C,EAAAA,UAASzL,KAAA,CAAC,CACT0L,SAAU,cACVC,SAAU,oPAUVC,UAAW,CAAC5E,gDAlBLA,SACAvE,qCAwDJoJ,EAAAA,UAAS7L,KAAA,CAAC,sBA3DgB8L,EAAAA,mBAAkBC,WAAA,CAAA,CAAA/H,KA4D5CgI,EAAAA,4CArCFC,EAAAA,qBAEAA,EAAAA,sBAIAA,EAAAA,uBAIAA,EAAAA,2BAIAC,EAAAA,UAoJH3D,KC1LA4D,EAAA,WA4CE,SAAAA,EACUlF,EACAC,EACAnB,EAEuBqG,GAJvBzP,KAAAsK,aAAAA,EACAtK,KAAAuK,yBAAAA,EACAvK,KAAAoJ,SAAAA,EAzBMpJ,KAAA0P,UAAoB,GAEpC1P,KAAA2P,iBAAkB,EAcR3P,KAAAgM,YAAiC,IAAIC,EAAAA,aAI/CjM,KAAA4P,gBAAe,aASb5P,KAAK2P,gBAAsC,OAApBF,EAsG3B,OA/HEjQ,OAAA2F,eAAaqK,EAAAtP,UAAA,QAAK,KAAlB,SAAmBc,GACjBhB,KAAK2P,iBAAmB/H,QAAQC,KAAK,wCAAwC7H,KAAKC,YAAYiI,KAAI,4FAGpG1I,OAAA2F,eAAaqK,EAAAtP,UAAA,OAAI,KAAjB,SAAkB8M,GAChBhN,KAAK2P,iBAAmB/H,QAAQC,KAAK,uCAAuC7H,KAAKC,YAAYiI,KAAI,4FAGnG1I,OAAA2F,eAAaqK,EAAAtP,UAAA,UAAO,KAApB,SAAqB0G,GACnB5G,KAAK2P,iBAAmB/H,QAAQC,KAAK,0CAA0C7H,KAAKC,YAAYiI,KAAI,4FAmBtGsH,EAAAtP,UAAA2P,mBAAA,WACE7P,KAAK8P,YAAY,qBAGnBN,EAAAtP,UAAA6P,sBAAA,WACE/P,KAAK8P,YAAY,wBAGnBN,EAAAtP,UAAA8P,gBAAA,WACEhQ,KAAK8P,YAAY,kBAGnBN,EAAAtP,UAAA+P,mBAAA,WACEjQ,KAAK8P,YAAY,qBAGnBN,EAAAtP,UAAA2M,UAAA,WACE7M,KAAK8P,YAAY,YAGnBN,EAAAtP,UAAAgQ,SAAA,WACElQ,KAAK8P,YAAY,WAGnBN,EAAAtP,UAAA4M,YAAA,SAAYC,GACNA,EAAQjL,QACV9B,KAAK4P,gBAAkB5P,KAAKmQ,YAAYnQ,KAAK8B,MAAO9B,KAAKoQ,eAG3DpQ,KAAK8P,YAAY,YAAa/C,IAGhCyC,EAAAtP,UAAAoN,YAAA,WACEtN,KAAK8P,YAAY,aACjB9P,KAAK4P,mBAGCJ,EAAAtP,UAAAiQ,YAAR,SAAoBnF,EAA2BoF,GAA/C,IAAAhJ,EAAApH,KACEA,KAAK4P,mBACJ5E,EAAE/E,UAAY,IAAI1C,QAAO,SAACkE,GACzB2I,EAAehJ,EAAKiJ,iBAAiBrF,EAAGoF,EAAchJ,EAAKkD,aAAaV,WAAWnC,UAG/E8D,EAAMvL,KAAKsK,aAAarB,gBAAgB+B,EAAGhL,KAAKuK,yBAA0BvK,KAAKoJ,UAMrF,OALImC,IACF6E,EAAaE,OAAO/E,EAAIhC,UACxBvJ,KAAKuQ,mBAAmBhF,EAAKP,IAG/B,YACGA,EAAEM,gBAAkB,IAAI/H,QAAO,SAACyF,GAAgB,OAAAA,EAAawH,YAC9DxF,EAAEM,eAAiB,KAIfkE,EAAAtP,UAAA4P,YAAR,SAAoB5H,EAAc6E,GAC5B/M,KAAK8B,MAAM2O,OAASzQ,KAAK8B,MAAM2O,MAAMvI,KAClC6E,IAAWA,EAAQjL,OACtB9B,KAAK8B,MAAM2O,MAAMvI,GAAMlI,KAAK8B,QAI5B9B,KAAK8B,MAAM4O,WAAa1Q,KAAK8B,MAAM4O,UAAUxI,IAC/ClI,KAAK8B,MAAM4O,UAAUxI,GACnBlI,KAAK8B,MAAMkL,KACXhN,KAAK8B,MACL9B,KAAK8B,MAAMU,MACXxC,KAAK8B,MAAM8E,UAKT4I,EAAAtP,UAAAmQ,iBAAR,SACEvO,EACAsO,EACAjJ,OAEMwJ,EAAM7O,EAAM8E,SAAW9E,EAAM8E,QAAQ6C,0BACvC3H,EAAM8E,QAAQ6C,0BACdzJ,KAAKuK,yBAEHgB,EAAM6E,EAAanH,gBAAmB0H,EAAIhH,wBAAwBxC,EAAOmB,YAG/E,GAFAtI,KAAKuQ,mBAAmBhF,EAAKzJ,IAExByJ,EAAIrC,SAAS0H,eAChB,MAAMjI,MAASxB,EAAOmB,UAAUpI,UAAUD,YAAYiI,KAAI,0IAG5D,OAAOqD,EAAIrC,SAAS0H,gBAGdpB,EAAAtP,UAAAqQ,mBAAR,SAAgDhF,EAAsBzJ,GAChEA,EAAMwJ,eACRxJ,EAAMwJ,eAAe9J,KAAK+J,GAE1BnG,EAAiBtD,EAAO,iBAAkB,CAACyJ,IAE7C/L,OAAOa,OAAOkL,EAAIrC,SAAU,CAAEpH,MAAKA,yBA3ItCgN,EAAAA,UAASzL,KAAA,CAAC,CACT0L,SAAU,eACVC,SAAU,yCACV6B,KAAM,CACJC,kBAAmB,yBACnBC,UAAW,6FAXNjL,SAJ8D4F,EAAAA,gCAC0CC,EAAAA,4CA8C5GuD,EAAAA,UAAS7L,KAAA,CAAC,wDA5BZiM,EAAAA,yBACAA,EAAAA,MAAKjM,KAAA,CAAC,wBAINiM,EAAAA,oBAIAA,EAAAA,uBAIAA,EAAAA,2BAIAC,EAAAA,6BAEAyB,EAAAA,UAAS3N,KAAA,CAAC,YAAW,CAAS4N,KAAMC,EAAAA,iBAAkBC,UAAQ,OAiHjE3B,EAzJA,gBCqCE,SAAA4B,EACUC,EACAC,EACUC,GAFVvR,KAAAqR,SAAAA,EACArR,KAAAsR,WAAAA,EAfFtR,KAAAwR,kBAAyB,GACzBxR,KAAAyR,aAAY9P,EACfW,EAAiB,CACpB,WACA,cACA,WACA,aAYAtC,KAAK0R,SAAWH,EA0HpB,OAnIE/R,OAAA2F,eAAIiM,EAAAlR,UAAA,KAAE,KAAN,WAAkC,OAAOF,KAAK8B,MAAM6P,iBAAmB,oCAEvEnS,OAAA2F,eAAYiM,EAAAlR,UAAA,oBAAiB,KAA7B,WAAkC,OAAQF,KAAK8B,OAAS9B,KAAK8B,MAAqB,eAAM,oCAUxFsP,EAAAlR,UAAA4M,YAAA,SAAYC,GAAZ,IAAA3F,EAAApH,KACM+M,EAAQjL,QACV9B,KAAKqR,SAASO,aAAa5R,KAAKsR,WAAWO,cAAe,KAAM7R,KAAK8B,MAAMgQ,IACvE9R,KAAK+R,IAAM/R,KAAK+R,GAAGC,YACrBvM,EAAazF,KAAK+R,GAAI,aAAY,SAAGjN,EAAQmN,GACvCA,GACFzS,OAAOoF,KAAKqN,GAAU1O,QAAO,SAAC2O,GAAQ,OAAA9K,EAAKiK,SAASc,gBAAgB/K,EAAKkK,WAAWO,cAAeK,KAGjGpN,GACFtF,OAAOoF,KAAKE,GAAQvB,QAAO,SAAC2O,GAAQ,OAAA9K,EAAKwK,aAAaM,EAAMpN,EAAOoN,QAKzElS,KAAKoS,oBACiC,IAAlCpS,KAAKqS,kBAAkB1R,QACzB8E,EAAazF,KAAK8B,MAAO,QAAO,SAAGL,OAC3B6Q,EAAUlL,EAAKiL,kBAAoBjL,EAAKiL,kBAAkB,GAAK,KAChEC,GAILlL,EAAKmL,aAAaD,EAAS7Q,OAcnC2P,EAAAlR,UAAA2M,UAAA,WAAA,IAAAzF,EAAApH,KACEA,KAAKyR,aAAalO,QAAO,SAAC2O,OAClBzQ,EAAQ2F,EAAK2K,GAAGG,GAClB9K,EAAKoK,kBAAkBU,KAAUzQ,KACnC2F,EAAKoK,kBAAkBU,GAAQzQ,IACR,IAAVA,EACX2F,EAAKwK,aAAaM,GAAgB,IAAVzQ,EAAiByQ,EAAO,GAAGzQ,GAEnD2F,EAAKiK,SAASc,gBAAgB/K,EAAKkK,WAAWO,cAAeK,OAMrEd,EAAAlR,UAAAoN,YAAA,WACEtN,KAAKwS,qBAGPpB,EAAAlR,UAAAqS,aAAA,SAAaD,EAAS7Q,GAAtB,IAAA2F,EAAApH,KACE,GAAKsS,EAAQG,MAAb,KAIMC,IAAc1S,KAAK0R,SAASiB,eAC7B3S,KAAKqS,kBACLO,KAAI,SAACN,GAAW,OAAAlL,EAAKsK,SAASiB,gBAAkBL,GAAWA,EAAQO,SAASzL,EAAKsK,SAASiB,iBAE3FlR,IAAUiR,EACZJ,EAAQG,SACEhR,GAASiR,GACnBJ,EAAQQ,SAIZ1B,EAAAlR,UAAA6S,QAAA,SAAQC,GACDhT,KAAK8B,MAAM2Q,QACdzS,KAAK8B,MAAM2Q,OAAQ,GAGjBzS,KAAK+R,GAAGU,OACVzS,KAAK+R,GAAGU,MAAMzS,KAAK8B,MAAOkR,IAI9B5B,EAAAlR,UAAA+S,OAAA,SAAOD,GACDhT,KAAK8B,MAAM2Q,QACbzS,KAAK8B,MAAM2Q,OAAQ,GAGjBzS,KAAK+R,GAAGe,MACV9S,KAAK+R,GAAGe,KAAK9S,KAAK8B,MAAOkR,IAI7B5B,EAAAlR,UAAAgT,SAAA,SAASF,GACHhT,KAAK+R,GAAGoB,QACVnT,KAAK+R,GAAGoB,OAAOnT,KAAK8B,MAAOkR,GAGzBhT,KAAK8B,MAAM2E,aACbzG,KAAK8B,MAAM2E,YAAY2M,eAInBhC,EAAAlR,UAAAkS,kBAAR,WACMpS,KAAK8B,MAAqB,cAC5B9B,KAAK8B,MAAqB,cAAEN,KAAKxB,KAAKsR,WAAWO,eAEjDzM,EAAiBpF,KAAK8B,MAAO,gBAAiB,CAAC9B,KAAKsR,WAAWO,iBAI3DT,EAAAlR,UAAAsS,kBAAR,WAAA,IAAApL,EAAApH,KACQqT,EAAQrT,KAAKqS,kBAAkBiB,UAAS,SAAChB,GAAW,OAAAA,IAAYlL,EAAKkK,WAAWO,iBACvE,IAAXwB,GACFrT,KAAK8B,MAAqB,cAAEyR,OAAOF,EAAO,IAItCjC,EAAAlR,UAAA0R,aAAR,SAAqBM,EAAczQ,GACjCzB,KAAKqR,SAASO,aAAa5R,KAAKsR,WAAWO,cAAeK,EAAMzQ,wBA7JnE+R,EAAAA,UAASnQ,KAAA,CAAC,CACT0L,SAAU,qBACV8B,KAAM,CACJ4C,cAAe,aACfC,cAAe,UAEfC,UAAW,kBACXC,SAAU,iBACVC,UAAW,sCACXC,YAAa,0CACbC,UAAW,sCACXC,WAAY,mBACZC,aAAc,0FAjB+CC,EAAAA,iBAA7CC,EAAAA,8CAwCfC,EAAAA,OAAM/Q,KAAA,CAACgR,EAAAA,8CAnBT/E,EAAAA,MAAKjM,KAAA,CAAC,uBA+IT+N,KChKAkD,EAAA,WAAA,SAAAA,KA2BA,OAvBE9U,OAAA2F,eACImP,EAAApU,UAAA,QAAK,KADT,WACc,OAAOF,KAAK8B,MAAMU,WAChC,SAAUxB,GAAU4G,QAAQC,KAAK,wCAAwC7H,KAAKC,YAAYiI,KAAI,4FAE9F1I,OAAA2F,eACImP,EAAApU,UAAA,OAAI,KADR,WACa,OAAmBF,KAAK8B,MAAMgB,OAAkB,iBAC7D,SAASkK,GAAQpF,QAAQC,KAAK,uCAAuC7H,KAAKC,YAAYiI,KAAI,4FAE1F1I,OAAA2F,eACImP,EAAApU,UAAA,UAAO,KADX,WACgB,OAAOF,KAAK8B,MAAM8E,aAClC,SAAYA,GAAyBgB,QAAQC,KAAK,0CAA0C7H,KAAKC,YAAYiI,KAAI,4FAEjH1I,OAAA2F,eAAImP,EAAApU,UAAA,MAAG,KAAP,WAAY,OAAOF,KAAK8B,MAAMC,qCAE9BvC,OAAA2F,eAAImP,EAAApU,UAAA,cAAW,KAAf,WAAoB,OAAOF,KAAK8B,MAAM2E,6CAEtCjH,OAAA2F,eAAImP,EAAApU,UAAA,KAAE,KAAN,WAAW,OAAOF,KAAK8B,MAAM6P,iBAAmB,oCAEhDnS,OAAA2F,eAAImP,EAAApU,UAAA,YAAS,KAAb,WAA2B,OAAOF,KAAK4G,QAAQJ,UAAUxG,uCAEzDR,OAAA2F,eAAImP,EAAApU,UAAA,KAAE,KAAN,WAAmB,OAAOF,KAAK8B,MAAMgQ,oCAErCtS,OAAA2F,eAAImP,EAAApU,UAAA,YAAS,KAAb,WAAkB,OAAOF,KAAK4G,QAAQsE,WAAa,mEAzBlDoE,EAAAA,qBAGAA,EAAAA,oBAIAA,EAAAA,uBAIAA,EAAAA,SAeHgF,EA3BA,iBAiCE,SAAAC,IAAA,IAAAnN,EACEoN,EAAA5T,KAAAZ,OAAOA,YACP4H,QAAQC,KAAK,qFAEjB,OALoC4M,EAAAA,EAAAA,GAKpCF,GALoCD,GCdpC,SAAgBI,EAAgB5S,EAA0BgM,GACxDA,EAAUA,GAAWhM,EAAM2E,aACtB3E,EAAM2E,aAAeqH,IACxB1I,EAAiBtD,EAAO,cAAegM,GACnChM,EAAM6P,gBAAgBgD,UAAY7G,EAAQ8G,SAC5C9G,EAAQ+G,iBAGC/S,EAAM6P,gBAAgBgD,UAC/BnV,OAAO2F,eAAerD,EAAM6P,gBAAiB,WAAY,CACvDzM,IAAG,WAAQ,OAACpD,EAAM2E,YAAYmO,SAC9BjP,IAAG,SAAGlE,GAAmB,OAAAA,EAAQK,EAAM2E,YAAYoO,UAAY/S,EAAM2E,YAAYqO,UACjFxP,YAAY,EACZE,cAAc,SAKhB1C,EAAShB,EAAMgB,OAAkB,YACrC,GAAKA,EAAL,CAKA,QADML,EAAQZ,EAAWC,GAChBtB,EAAI,EAAGA,EAAKiC,EAAM9B,OAAS,EAAIH,IAAK,KACrC2B,EAAOM,EAAMjC,GACdsC,EAAOoC,IAAI,CAAC/C,KACfuS,EAAgB,CACd3S,IAAKI,EACLsE,YAAa,IAAIwG,EAAAA,UAAU,IAC3BnK,OAAQ,CAAE2D,YAAa3D,KAI3BA,EAAqBA,EAAOoC,IAAI,CAAC/C,QAG7BV,EAAQoB,EAAcf,GAExB4B,EAAkBoK,EAAQrM,QAAUiC,EAAkBjC,IACrDqM,EAAQrM,QAAUA,KAClBqM,aAAmBiH,EAAAA,cAEtBjH,EAAQkH,WAAWvT,OAEfM,EAAMU,EAAMA,EAAM9B,OAAS,GAC7BmC,EAAOoC,IAAI,CAACnD,MAAU+L,GACxBhL,EAAOmS,WAAWlT,EAAK+L,IC5D3B,IAAAoH,EAAA,SAAAV,GAME,SAAAU,EAA+CC,GAA/C,IAAA/N,EACEoN,EAAA5T,KAAAZ,OAAOA,YALToH,EAAAoB,eAAsB,CACpBnD,aAAc,IAMV8P,aAAmB9K,GACrBzC,QAAQC,KAAK,8CAA8CT,EAAKnH,YAAYiI,KAAI,wDAiDtF,OA3D8FuM,EAAAA,EAAAA,GAc5FS,EAAAhV,UAAA6K,WAAA,SAAWjJ,GAET,GADAA,EAAM2I,WAAa3I,EAAM2I,YAAc,GACnC3I,EAAM2I,WAAW9J,OAASmB,EAAMU,MAAM7B,OACxC,IAAK,IAAIH,EAAIsB,EAAM2I,WAAW9J,OAAQH,GAAKsB,EAAMU,MAAM7B,SAAUH,EAC9DsB,EAAiB,YAAesT,SAAS5U,GAC1CsB,EAAM2I,WAAW8I,OAAO/S,EAAG,GAI/B,IAASA,EAAIsB,EAAM2I,WAAW9J,OAAQH,EAAIsB,EAAMU,MAAM7B,OAAQH,IAAK,KAC3DwK,EAAC5K,EAAA,GAAQwC,EAAMd,EAAMuT,YAAW,CAAEtT,IAAK,GAAGvB,IAChDsB,EAAM2I,WAAWjJ,KAAKwJ,KAI1BkK,EAAAhV,UAAA+K,aAAA,SAAanJ,GACPA,EAAM2E,aAIViO,EAAgB5S,EAAO,IAAIwT,EAAAA,UACzBxT,EAAM2I,WAAWjG,IAAG,SAACwG,GAAK,OAAAA,EAAEvE,cAC5B,CACET,WAAYlE,EAAMyT,YAClBC,gBAAiB1T,EAAM2T,iBACvBC,SAAU5T,EAAMwM,aAAaoH,aAKnCR,EAAAhV,UAAAyV,IAAA,SAAInV,EAAYoN,GACdpN,EAAIkD,EAAkBlD,GAAKR,KAAK8B,MAAM2I,WAAW9J,OAASH,EAC1DR,KAAKwC,MAAM+Q,OAAO/S,EAAG,EAAGoN,EAAehL,EAAMgL,GAAgB7J,WAEtD/D,KAAY,QAAE2K,YAAW,IAGlCuK,EAAAhV,UAAA0V,OAAA,SAAOpV,GACLR,KAAKwC,MAAM+Q,OAAO/S,EAAG,GACrBR,KAAKyG,YAAY2O,SAAS5U,GAC1BR,KAAK8B,MAAM2I,WAAW8I,OAAO/S,EAAG,GAChCR,KAAK8B,MAAM2I,WAAWlH,QAAO,SAAEyH,EAAGjJ,GAAQ,OAAAiJ,EAAEjJ,IAAM,GAAGA,IAE9C/B,KAAY,QAAE2K,YAAW,6CA9D3BN,EAAiB+E,WAAA,CAAA,CAAA/H,KAWX+M,EAAAA,OAAM/Q,KAAA,CAACuC,IAAa,CAAAyB,KAAGgI,EAAAA,cAqDtC6F,EA3DA,CAA8FZ,GCL9FuB,EAAA,SAAArB,GAAA,SAAAqB,mDAGA,OAH4FpB,EAAAA,EAAAA,2CAEzFzD,EAAAA,UAAS3N,KAAA,CAAC,iBAAgB,CAAS4N,KAAMC,EAAAA,iBAAkBC,UAAQ,OACtE0E,EAHA,CAA4FvB,iBCD5F,SAAAwB,IAAA,IAAA1O,EAAA,OAAAoN,GAAAA,EAAA3T,MAAAb,KAAAU,YAAAV,YAWEoH,EAAAoB,eAAiB,CACfnD,aAAc,MAElB,OAJiCoP,EAAAA,EAAAA,uBAVhC3F,EAAAA,UAASzL,KAAA,CAAC,CACT0L,SAAU,eACVC,SAAU,wHAIV6B,KAAM,CACJE,UAAW,uCAOf+E,GAJiCxB,GCbjCyB,EAAA,WAYE,SAAAA,EAAoBzL,GAAAtK,KAAAsK,aAAAA,EAsCtB,OApCE9K,OAAA2F,eAAI4Q,EAAA7V,UAAA,eAAY,KAAhB,eACQ8V,EAAYhW,KAAK8B,MAAM2E,YAC7B,IAAK,IAAI/E,KAASsU,EAAUC,OAC1B,GAAID,EAAUC,OAAOpW,eAAe6B,GAAQ,KACtCyG,EAA6BnI,KAAKsK,aAAaR,oBAAoBpI,GAEvE,GAAIgB,EAASsT,EAAUC,OAAOvU,IAAS,CACrC,GAAIsU,EAAUC,OAAOvU,GAAOwU,UAC1B,OAGEF,EAAUC,OAAOvU,GAAOyG,UAC1BA,EAAU6N,EAAUC,OAAOvU,GAAOyG,SAgBtC,OAZInI,KAAK8B,MAAMiF,YAAc/G,KAAK8B,MAAMiF,WAAWb,UAAYlG,KAAK8B,MAAMiF,WAAWb,SAASxE,KAC5FyG,EAAUnI,KAAK8B,MAAMiF,WAAWb,SAASxE,IAGvC1B,KAAK8B,MAAMkE,YAAchG,KAAK8B,MAAMkE,WAAWtE,IAAU1B,KAAK8B,MAAMkE,WAAWtE,GAAOyG,UACxFA,EAAUnI,KAAK8B,MAAMkE,WAAWtE,GAAOyG,SAGrCnI,KAAK8B,MAAM0T,iBAAmBxV,KAAK8B,MAAM0T,gBAAgB9T,IAAU1B,KAAK8B,MAAM0T,gBAAgB9T,GAAOyG,UACvGA,EAAUnI,KAAK8B,MAAM0T,gBAAgB9T,GAAOyG,SAGvB,mBAAZA,EACFA,EAAQ6N,EAAUC,OAAOvU,GAAQ1B,KAAK8B,OAGxCqG,wDAzCd2G,EAAAA,UAASzL,KAAA,CAAC,CACT0L,SAAU,4BACVC,SAAU,kEANHlJ,oCASNwJ,EAAAA,SAwCHyG,EAlDA,iBCGA,SAAAI,mDAImD,OAAX1B,EAAAA,EAAAA,uBAJvC3F,EAAAA,UAASzL,KAAA,CAAC,CACT0L,SAAU,kBACVC,SAAU,+CAEuCmH,GAAX7B,GCaxC,SAAgB8B,EAAeC,EAAyCC,EAAcC,GACpF,OAAIF,aAAsBG,SACjBH,EAAWxV,MAAMyV,EAASC,KAE1BF,EChBX,iBAAA,SAAAI,KAuMA,OAtMEA,EAAAvW,UAAA4K,YAAA,SAAYhJ,GAAZ,IAAAsF,EAAApH,KACM8B,EAAMgB,QAAUhB,EAAM8E,QAAQuH,cAIlCrM,EAAM8E,QAAQuH,YAAW,SAAInD,EAAG0L,GAAgB,OAAAtP,EAAK+G,YAAYnD,EAAG0L,MAGtED,EAAAvW,UAAA6K,WAAA,SAAWjJ,GACT,GAAKA,EAAMgB,SAAUhB,EAAM6U,sBAA3B,CAOA,GAFAvR,EAAiBtD,EAAO,wBAAyB,IAE7CA,EAAM8U,qBAAsB,gBACnB7U,OACH8U,EAAqB/U,EAAM8U,qBAAqB7U,GACpD+U,EDhBV,SAAgBC,EAA0BV,EAAoBW,GAC5D,IACE,OAAOR,SAAQ3V,WAAA,EAAAc,EAAIqV,EAAQ,CAAKX,EAAU,yBAC1C,MAAO3U,GACPkG,QAAQlG,MAAMA,ICYgBqV,CACtB,SAAShV,EACT,CAAC,kBAAmB,QAAS,UAGjC,GAAkC,iBAAvB8U,GdgDnB,SAAgBI,EAAWxV,GACzB,MAAyB,mBAAlB,EcjD6CwV,CAAWJ,GACvD/U,EAAM6U,sBAAsB5U,GAAO,CACjCsU,WAAYa,EAAKC,gBACfN,EACA/U,EAAMgB,OAAO8T,sBAAwB9U,EAAMgB,OAAO8T,qBAAqB/W,eAAe,uCAC5E,OAAAiC,EAAMgB,OAAO6O,gBAAgBgD,UACnC5Q,WAEN+S,sBAAqBA,GAEX,6BAAR/U,GACFvC,OAAO2F,eAAerD,EAAM6U,sBAAsB5U,GAAM,kBAAmB,CACzEmD,IAAG,WAAQ,OAAApD,EAAM6P,gBAAgBgD,UACjChP,IAAG,aACHL,YAAY,EACZE,cAAc,SAGb,GAAIqR,aAA8B1S,EAAAA,WAAY,KAC7CiT,EAAe,EAClB7K,UAAS,SAAC9H,GAAK,OAAA2R,EAAeU,EAAuB,CAAEhV,MAAKA,GAAI,CAAC2C,EAAG3C,EAAMU,MAAOV,MAE9EuV,EAAYvV,EAAM2O,MAAM6G,UAC9BxV,EAAM2O,MAAM6G,UAAS,SAAIxV,GACvBuV,GAAaA,EAAUvV,GACvBsV,EAAa7J,wBAhCnB,IAAK,IAAMxL,KAAOD,EAAM8U,uBAAb7U,GAsCb,GAAID,EAAMyV,eAAgB,QAEjBzV,EAAM0V,KAGb,QADIC,EAAS3V,EAAMgB,OACZ2U,IAAWA,EAAOF,gBACvBE,EAASA,EAAO3U,OAGlBhB,EAAMyV,eAAiBvX,KAAKmX,gBAC1BrV,EAAMyV,eACNE,GAAUA,EAAOF,eAAc,WAAS,OAAAE,EAAOD,MAAOzT,cAK5D0S,EAAAvW,UAAA+K,aAAA,SAAanJ,GACPA,EAAMgB,QAIVhB,EAAM8E,QAAQuH,YAAYrM,GAAO,IAG3B2U,EAAAvW,UAAAiX,gBAAR,SAAwBd,EAAYqB,GAMlC,MAJ0B,iBAD1BrB,EAAaA,GAAU,WAAW,OAAA,MAEhCA,ED3FN,SAAgBsB,EAAqBtB,EAAoBW,GACvD,IAKE,OAJ0C,IAAtCX,EAAWpU,QAAQ,eACrB2F,QAAQC,KAAK,wGAGR2O,SAAQ3V,WAAA,EAAAc,EAAIqV,EAAQ,CAAE,UAAUX,EAAU,OACjD,MAAO3U,GACPkG,QAAQlG,MAAMA,ICmFCiW,CAAqBtB,EAAY,CAAC,QAAS,YAAa,WAGhEqB,WACFlV,EAAY0I,EAAgBpJ,GAA6B,OAAA4V,KAAsBrB,EAAW7T,EAAO0I,EAAWpJ,IAC7GuU,GAGEI,EAAAvW,UAAAiO,YAAR,SAAoBrM,EAA+B4U,GAAnD,IAAAtP,EAAApH,UAAmD,IAAA0W,IAAAA,GAAA,OAC7CjL,GAAe,EACnB3J,EAAM2I,WAAWlH,QAAO,SAACyH,GACvB5D,EAAKwQ,2BAA2B5M,EAAG0L,KAAiBjL,GAAe,GACnErE,EAAKyQ,2BAA2B7M,EAAG0L,KAAiBjL,GAAe,GAE/DT,EAAEP,YAAoC,EAAtBO,EAAEP,WAAW9J,QAC/ByG,EAAK+G,YAAYnD,EAAG0L,KAIpBjL,GAAgB3J,EAAM8E,SAAW9E,EAAM8E,QAAQyE,eACjDvJ,EAAM8E,QAAQyE,cAAcvJ,IAIxB2U,EAAAvW,UAAA0X,2BAAR,SAAmC9V,EAA+B4U,GAChE,IAAK5U,IAAUA,EAAM6U,sBACnB,OAAO,MAGLlL,GAAe,EACbmL,EAAuB9U,EAAM6U,sBAC7B3Q,EAAa1D,EAAkBkC,IAAG,SAACC,GAAK,MAAA,mBAAmBA,IAEjE,IAAK,IAAM1C,KAAO6U,EAAsB,KAClCkB,EAAkB1B,EAAeQ,EAAqB7U,GAAKsU,WAAY,CAAEvU,MAAKA,GAAI,CAACA,EAAMU,MAAOV,EAAM8E,QAAQsE,UAAWpJ,IAK7H,GAJY,6BAARC,IACF+V,IAAoBA,GAIpBpB,GACEE,EAAqB7U,GAAK+V,kBAAoBA,KACzCpV,EAASoV,IAAoBC,KAAKC,UAAUF,KAAqBC,KAAKC,UAAUpB,EAAqB7U,GAAK+V,kBAEjH,CASA,GARArM,GAAe,EACfmL,EAAqB7U,GAAK+V,gBAAkBA,EAC5C1B,EACEQ,EAAqB7U,GAAK+U,sBAC1B,CAAEhV,MAAKA,GACP,CAACgW,EAAiBhW,EAAMU,MAAOV,IAGH,IAA1BC,EAAIE,QAAQ,UAAiB,KACzBE,EAAOJ,EAAIG,QAAQ,WAAY,IACnC4L,EAAUhM,EAAMC,KAAOA,IAAQI,EAAOL,EAAM2E,YAAc3E,EAAMgB,OAAO2D,YAAYvB,IAAI/C,IAGvF2L,GACKpK,EAAkBoK,EAAQrM,QAAUiC,EAAkBoU,IACxDhK,EAAQrM,QAAUqW,GAErBhK,EAAQkH,WAAW8C,IAIU,IAA7B9R,EAAW/D,QAAQF,IAAeD,EAAM2E,aAC1C3E,EAAM2E,YAAYwR,uBAAuB,CAAEC,WAAW,KAK5D,OAAOzM,GAGDgL,EAAAvW,UAAA2X,2BAAR,SAAmC/V,EAA+B4U,GAChE,IAAK5U,GAAS4B,EAAkB5B,EAAMyV,gBACpC,OAAO,MAGHY,IAAkC/B,EACtCtU,EAAMyV,eACN,CAAEzV,MAAKA,GACP,CAACA,EAAMU,MAAOV,EAAM8E,QAAQsE,UAAWpJ,IAErC2J,GAAe,EASnB,OARI0M,IAAyBrW,EAAM0V,MAAQd,KACzCjL,GAAe,EAEf3J,EAAM0V,KAAOW,EACbrW,EAAM6P,gBAAgByG,OAASD,EAC/BnY,KAAKqY,kBAAkBvW,EAAOqW,IAGzB1M,GAGDgL,EAAAvW,UAAAmY,kBAAR,SAA0BvW,EAA0B0V,GAApD,IAAApQ,EAAApH,KACM8B,EAAM2I,YACR3I,EAAM2I,WACH6N,OAAM,SAACtN,GAAK,OAACA,EAAEuM,iBACfhU,QAAO,SAACyH,GAAK,OAAA5D,EAAKiR,kBAAkBrN,EAAGwM,KAGxC1V,EAAM2E,aAAe3E,EAAMC,OAChB,IAATyV,GAAiB1V,EAAM2E,YAAY3D,OPhM7C,SAAgByV,EAAkBzW,OAC1BkL,EAAOlL,EAAM2E,YAAkB,OACrC,GAAIuG,aAAgBsI,EAAAA,WAEL,KADPvT,EAAMiL,EAAKwL,SAASlF,UAAS,SAAC3O,GAAK,OAAAA,IAAM7C,EAAM2E,iBAEnDuG,EAAKoI,SAASrT,GACdD,EAAM2E,YAAYgS,UAAU,YAEzB,GAAIzL,aAAgBC,EAAAA,UAAW,KAC9BxK,EAAQZ,EAAWC,GACnBC,EAAMU,EAAMA,EAAM9B,OAAS,GAC7BqM,EAAK9H,IAAI,CAACnD,MAAUD,EAAM2E,aAC5BuG,EAAK0L,cAAc3W,GAErBD,EAAM2E,YAAYgS,UAAU,OOmLxBF,CAAkBzW,IACA,IAAT0V,GAAmB1V,EAAM2E,YAAY3D,QAC9C4R,EAAgB5S,IAIhBA,EAAM8E,QAAQuE,cAChBrJ,EAAM8E,QAAQuE,aAAa7J,KAAI,CAA4BQ,MAAOA,EAAOuF,KAAM,SAAU5F,MAAO+V,KAGtGf,kBCxME,SAAAkC,EAAoBrO,GAAAtK,KAAAsK,aAAAA,EAuHtB,OArHEqO,EAAAzY,UAAA6K,WAAA,SAAWjJ,GACJA,EAAMgB,QAAWhB,EAAMC,MAI5B/B,KAAK4Y,oBAAoB9W,EAAO,cAChC9B,KAAK4Y,oBAAoB9W,EAAO,qBAG1B6W,EAAAzY,UAAA0Y,oBAAR,SAA4B9W,EAA+BuF,GAA3D,IAAAD,EAAApH,KACE,GAAKgE,EAAYlC,EAAM,IAAMuF,IAA7B,KAYMrB,EAAqC,eAATqB,EAAwBrH,KAAK6Y,6BAA6B/W,GAAS,GACrG,GAAIA,EAAMuF,GACR,IAAK,IAAMyR,KAAiBhX,EAAMuF,GACV,eAAlByR,GAAmCnZ,MAAMmE,QAAQhC,EAAMuF,GAAMN,cAC/DjF,EAAMuF,GAAMN,WAAa,CAACjF,EAAMuF,GAAMN,YACtCa,QAAQC,KAAK,aAAa/F,EAAMC,IAAG,0FAGnB,eAAlB+W,EACI9S,EAAWxE,KAAIX,MAAfmF,EAAUrE,EAASG,EAAMuF,GAAMN,WAAWvC,IAAG,SAACC,GAAK,OAAA2C,EAAK2R,kBAAkBjX,EAAO2C,OACjFuB,EAAWxE,KAAKxB,KAAK+Y,kBAAkBjX,EAAOA,EAAMuF,GAAMyR,GAAgBA,IAKlF1T,EACEtD,EACA,IAAMuF,EACG,eAATA,EAAwB2R,EAAAA,WAAWC,QAAQjT,GAAcgT,EAAAA,WAAWE,aAAY,SA5BhF,GAAIpX,EAAM2E,YAAa,KACfc,EAAqB,eAATF,EAAwBvF,EAAM2E,YAAYc,UAAYzF,EAAM2E,YAAY0S,eACtFrX,EAAM,IAAMuF,KAAUE,IACxBzF,EAAM,IAAMuF,GAAQE,KA6BpBoR,EAAAzY,UAAA2Y,6BAAR,SAAqC/W,GACnC,OAAOQ,EACJgW,OAAM,SAACc,GAAO,OAACtX,EAAM6P,iBAAmB7P,EAAM6P,gBAAgB9R,eAAeuZ,IAAUtX,EAAM8U,sBAAwB9U,EAAM8U,qBAAqB,mBAAmBwC,KACnK5U,IAAG,SAAE4U,mBAAStL,OACPrM,EAAQK,EAAM6P,gBAAgByH,GACpC,IAAc,IAAV3X,EACF,OAAO,KAET,OAAQ2X,GACN,IAAK,WACH,OAAOJ,EAAAA,WAAWK,SAASvL,GAC7B,IAAK,UACH,OAAOkL,EAAAA,WAAWM,QAAQ7X,EAAnBuX,CAA0BlL,GACnC,IAAK,YACH,OAAOkL,EAAAA,WAAWO,UAAU9X,EAArBuX,CAA4BlL,GACrC,IAAK,YACH,OAAOkL,EAAAA,WAAWQ,UAAU/X,EAArBuX,CAA4BlL,GACrC,IAAK,MACH,OAAOkL,EAAAA,WAAWS,IAAIhY,EAAfuX,CAAsBlL,GAC/B,IAAK,MACH,OAAOkL,EAAAA,WAAWU,IAAIjY,EAAfuX,CAAsBlL,QAK/B6K,EAAAzY,UAAA6Y,kBAAR,SAA0BjX,EAA+ByF,EAAsCuR,GAA/F,IAAA1R,EAAApH,KACE,OAAA,SAAQ8N,OACF6L,EAAW,EACU,iBAAdpS,IACToS,EAAcvS,EAAKkD,aAAaT,aAAatC,GAAWR,YAEtDrE,EAAS6E,KACXoS,EAAc,EAAmBtD,gBAG7BuD,EAAUD,EAAY7L,EAAShM,GACrC,OAAIgX,EfMV,SAAgBe,EAAUC,GACxB,QAASA,GAA2B,mBAAbA,EAAIC,KeNjBF,CAAUD,GACLA,EAAQG,KAAI,SAAEC,GAMnB,OAJIlY,EAAM8E,SAAW9E,EAAM8E,QAAQyE,eACjCvJ,EAAM8E,QAAQyE,cAAcvJ,GAGvBsF,EAAK6S,aAAanY,EAAOkY,EAAQ,CAAElB,cAAaA,EAAEvR,UAASA,MAI/DH,EAAK6S,aAAanY,EAAO8X,EAAS,CAAEd,cAAaA,EAAEvR,UAASA,IAG9DqS,IAIHjB,EAAAzY,UAAA+Z,aAAR,SAAqBnY,EAA+B8X,EAASM,aAAEpB,EAAAoB,EAAApB,cAAevR,EAAA2S,EAAA3S,UAC5E,GAAI7E,EAAS6E,IAAczF,EAAM2E,aAAec,EAAU2O,UAAW,KAC7DpI,EAAUhM,EAAM2E,YAAYvB,IAAIqC,EAAU2O,WAChD,GAAIpI,EAAS,KACLqM,EAAiBrM,EAAQmI,QAAU,GACpC2D,UAGIO,EAAcrB,GACrBhL,EAAQsM,UAAgD,IAAtC5a,OAAOoF,KAAKuV,GAAexZ,OAAe,KAAOwZ,IAHnErM,EAAQsM,UAASha,EAAA,GAAM+Z,IAAapX,EAAA,IAAG+V,GAAgB,CAAE3Q,QAASZ,EAAUY,SAASpF,KAOzF,OAAO6W,EAAU,OAAI1W,EAAA,IAAM4V,GAAgB,CAAE5C,UAAW3O,EAAU2O,WAAWhT,GAG/E,OAAO0W,EAAU,OAAIS,EAAA,IAAMvB,IAAgB,EAAIuB,IAEnD1B,kBCvHA,SAAA2B,KAsDA,OArDEA,EAAApa,UAAA6K,WAAA,SAAWjJ,GAELA,EAAMuT,aAINvT,EAAMC,KACR/B,KAAKua,eAAezY,GAGlBA,EAAMgB,QAAUhB,EAAM2I,aAAe3I,EAAMC,KAC7CqD,EAAiBtD,EAAO,cAAeA,EAAMgB,OAAO2D,eAIhD6T,EAAApa,UAAAqa,eAAR,SAAuBzY,OAMjBgM,EALE0M,EAAyC,CAC7CxU,WAAYlE,EAAMyT,YAClBC,gBAAiB1T,EAAM2T,iBACvBC,SAAU5T,EAAMwM,aAAaoH,UAIzB1I,EAAOlL,EAAMgB,OAAkB,YAC/BrB,EAAQoB,EAAcf,GACtBW,EAAQZ,EAAWC,GACzB,GAAIA,EAAM2E,uBAAuBpC,EAAAA,iBAAoB2I,GAAQA,EAAK9H,IAAIzC,GACpEqL,EAAUhM,EAAM2E,aAAeuG,EAAK9H,IAAIzC,GAErC+X,EAAexU,aAAe8H,EAAQvG,WACnCiT,EAAehF,kBAAoB1H,EAAQqL,iBAE3CqB,EAAexU,aAAe8H,EAAQvG,WACxCuG,EAAQ2M,cAAcD,EAAexU,YAEnCwU,EAAehF,kBAAoB1H,EAAQqL,gBAC7CrL,EAAQ4M,mBAAmBF,EAAehF,iBAE5C1H,EAAQmK,+BAEL,GAAInW,EAAMwH,mBAAqBxH,EAAMwH,kBAAkBhB,WAAaxG,EAAMwH,kBAAkBhB,UAAUqS,cAAe,KACpHrS,EAAYxG,EAAMwH,kBAAkBhB,UAC1CV,QAAQC,KAAK,eAAeS,EAAUJ,KAAI,8EAC1C4F,EAAUxF,EAAUqS,cAAclZ,EAAOK,QAGzCgM,EAFShM,EAAM2I,WAEL,IAAIwC,EAAAA,UAAU,GAAIuN,GAElB,IAAIzF,EAAAA,YAAYtT,EAAO+Y,GAGnC9F,EAAgB5S,EAAOgM,IAE3BwM,kBCrDE,SAAAM,EAAoBtQ,GAAAtK,KAAAsK,aAAAA,EADZtK,KAAA6a,OAAS,EAkHnB,OA/GED,EAAA1a,UAAA4K,YAAA,SAAYhJ,GAEV,GADA9B,KAAK8a,0BAA0BhZ,GAAOgJ,eAClChJ,EAAMgB,OAAV,KAIMiY,EAAmBjZ,EAAM8E,SAAW9E,EAAM8E,QAAQoU,gBAAmBhb,KAAKsK,aAAahE,OAAO0U,gBACnGrb,MAAMmE,QAAQiX,GAAmBA,EAAkB,CAACA,IAAkBxX,QAAO,SAACyX,GAC7E,GAAIA,IACFpT,QAAQC,KAAK,sFACMmT,EAAelZ,EAAM2I,WAAY3I,EAAMU,MAAkBV,EAAiB,YAAEA,EAAM8E,UAEnG,MAAM,IAAI+B,MAAM,qDAMxBiS,EAAA1a,UAAA6K,WAAA,SAAWjJ,GAAX,IAAAsF,EAAApH,KACEA,KAAKib,iBAAiBnZ,GACtB9B,KAAK8a,0BAA0BhZ,GAAOiJ,aAClCjJ,EAAM2I,YACR3I,EAAM2I,WAAWlH,QAAO,SAAEyH,EAAGqI,GAC3B7T,OAAO2F,eAAe6F,EAAG,SAAU,CAAE9F,IAAG,WAAQ,OAAApD,GAAO0D,cAAc,IACrEhG,OAAO2F,eAAe6F,EAAG,QAAS,CAAE9F,IAAG,WAAQ,OAAAmO,GAAO7N,cAAc,IACpE4B,EAAKyT,YAKXD,EAAA1a,UAAA+K,aAAA,SAAanJ,GACX9B,KAAK8a,0BAA0BhZ,GAAOmJ,gBAGhC2P,EAAA1a,UAAA+a,iBAAR,SAAyBnZ,OACjBoZ,EAAgCpZ,EAAY,OAC7CoZ,IAIL1b,OAAO2F,eAAerD,EAAO,OAAQ,CAAEoD,IAAG,WAAQ,OAAAgW,EAAKzU,aAAajB,cAAc,IAClFhG,OAAO2F,eAAerD,EAAO,UAAW,CAAEoD,IAAG,WAAQ,OAAAgW,EAAKtU,SAASpB,cAAc,IACjFhG,OAAO2F,eAAerD,EAAO,QAAS,CACpCoD,IAAG,WAAQ,OAAApD,EAAMC,KAAOD,EAAM2I,WAAa5H,EAAcf,GAASoZ,EAAK1Y,OACvEgD,cAAc,IAGhBrC,EAAiBrB,EAAO,CACtBgQ,GjBrDN,SAAgBqJ,EAAWN,EAAgB/Y,EAA0BuR,GACnE,GAAIvR,EAAMgQ,GAAI,OAAOhQ,EAAMgQ,OACvBzK,EAAOvF,EAAMuF,KAEjB,OADKA,GAAQvF,EAAMkN,WAAU3H,EAAO,YAC7B,CAACwT,EAAQxT,EAAMvF,EAAMC,IAAKsR,GAAOzE,KAAK,KiBiDrCuM,CAAW,UAAUnb,KAAK6a,OAAU/Y,EAAOA,EAAa,OAC5D2O,MAAO,GACPnC,aAAc,GACdqD,gBAAkB7P,EAAMuF,MAASvF,EAAMC,IAAW,CAChDqZ,MAAO,GACPC,YAAa,GACb5I,OAAO,GAHoC,KAO3C3Q,EAAM4O,WACR9I,QAAQC,KAAK,yEAGX/F,EAAMkN,UAA2B,oBAAflN,EAAMuF,OACtBvF,EAAMuF,MACRO,QAAQC,KAAK,6EAEf/F,EAAMuF,KAAO,oBAGVvF,EAAMuF,MAAQvF,EAAM2I,aACvB3I,EAAMuF,KAAO,gBAGXvF,EAAMuF,MACRrH,KAAKsK,aAAazB,eAAe/G,IAG9BkC,EAAYlC,EAAMuD,eAAiBrB,EAAYnB,EAAcf,KAChES,EAAiB2Y,EAAK1Y,MAAOX,EAAWC,GAAQA,EAAMuD,cAGxDrF,KAAKsb,kBAAkBxZ,KAGjB8Y,EAAA1a,UAAAob,kBAAR,SAA0BxZ,GACxBA,EAAMmE,SAAWnE,EAAMmE,UAAY,OAC7BsV,EAAyBnb,EAAA,CAC7BgG,WAAY,GACZC,YAAa,IACTvE,EAAM6P,gBAAgBxL,sBAAwB,IAGpDrE,EAAMmE,SAAW0I,EACZ3O,KAAKsK,aAAanE,qBAAqBC,WAAW5B,IAAG,SAACxD,GAAK,OAAAA,EAAEc,KAC7DyZ,EAA0BnV,WAAW5B,IAAG,SAACxD,GAAK,OAAAA,EAAEc,KAChDA,EAAMmE,SACNjG,KAAKsK,aAAanE,qBAAqBE,YAAY7B,IAAG,SAACxD,GAAK,OAAAA,EAAEc,KAC9DyZ,EAA0BlV,YAAY7B,IAAG,SAACxD,GAAK,OAAAA,EAAEc,MACpDwW,OAAM,SAAEkD,EAAIhb,EAAGib,GAAM,OAAAD,GAAMhb,IAAMib,EAAExZ,QAAQuZ,MAGvCZ,EAAA1a,UAAA4a,0BAAR,SAAkChZ,OAC1BkH,EAAehJ,KAAKsK,aAAarB,gBAAgBnH,GACjDoH,EAA4BF,EAAeA,EAAqB,SAAU,GAEhF,MAAO,CACL8B,YAAW,WAAQ,OAAA5B,EAAS4B,aAAe5B,EAAS4B,YAAYhJ,IAChEiJ,WAAU,WAAQ,OAAA7B,EAAS6B,YAAc7B,EAAS6B,WAAWjJ,IAC7DmJ,aAAY,WAAQ,OAAA/B,EAAS+B,cAAgB/B,EAAS+B,aAAanJ,MAGzE8Y,KCzGA,SAAgBc,EAAoBpR,GAClC,MAAO,CACLvE,MAAO,CACL,CAAEmC,KAAM,eAAgBI,UAAWwN,GACnC,CAAE5N,KAAM,kBAAmBI,UAAW6N,IAExClP,WAAY,CACV,CAAEiB,KAAM,OAAQE,UAAW,IAAIwS,EAActQ,IAC7C,CAAEpC,KAAM,mBAAoBE,UAAW,IAAIuQ,EAAyBrO,IACpE,CAAEpC,KAAM,aAAcE,UAAW,IAAIkS,GACrC,CAAEpS,KAAM,mBAAoBE,UAAW,IAAIqO,KAKjD,IAAAkF,EAAA,WAsCE,SAAAA,EACEC,EACmCC,QAAnC,IAAAA,IAAAA,EAAA,IAEKA,GAILA,EAAQtY,QAAO,SAAC4D,GAAU,OAAAyU,EAAc1U,UAAUC,KAEtD,OAlCSwU,EAAAG,QAAP,SAAe3U,GACb,YADa,IAAAA,IAAAA,EAAA,IACN,CACL4U,SAAUJ,EACV1M,UAAW,CACT,CAAE+M,QAASpW,EAAeqW,OAAO,EAAMC,WAAYR,EAAqBS,KAAM,CAACrW,IAC/E,CAAEkW,QAASpW,EAAewW,SAAUjV,EAAQ8U,OAAO,GACnD,CAAED,QAASK,EAAAA,6BAA8BD,SAAUjV,EAAQ8U,OAAO,GAClEnW,EACAuE,KAKCsR,EAAAW,SAAP,SAAgBnV,GACd,YADc,IAAAA,IAAAA,EAAA,IACP,CACL4U,SAAUJ,EACV1M,UAAW,CACT,CAAE+M,QAASpW,EAAewW,SAAUjV,EAAQ8U,OAAO,GACnD,CAAED,QAASK,EAAAA,6BAA8BD,SAAUjV,EAAQ8U,OAAO,GAClE5R,yBAjCPkS,EAAAA,SAAQlZ,KAAA,CAAC,CACRmZ,aAAc,CACZ5Q,EACA4D,EACA4B,EACA0E,EACAC,EACAI,GAEFsG,gBAAiB,CAAC3G,EAAaK,GAC/BuG,QAAS,CAAC9Q,EAAY4D,EAAa4B,EAAkB0E,EAAaC,GAClE4G,QAAS,CAACC,EAAAA,2DArCH9W,iCAkEJuJ,EAAAA,UAAQ,CAAAhI,KAAI+M,EAAAA,OAAM/Q,KAAA,CAACuC,QAQxB+V,EAhDA","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { FormlyFieldConfig } from './core';\nimport { Observable } from 'rxjs';\nimport { AbstractControl } from '@angular/forms';\nimport { FormlyFieldConfigCache } from './components/formly.field.config';\n\nexport function getFieldId(formId: string, field: FormlyFieldConfig, index: string|number) {\n  if (field.id) return field.id;\n  let type = field.type;\n  if (!type && field.template) type = 'template';\n  return [formId, type, field.key, index].join('_');\n}\n\nexport function getKeyPath(field: FormlyFieldConfigCache): string[] {\n  if (!field.key) {\n    return [];\n  }\n\n  /* We store the keyPath in the field for performance reasons. This function will be called frequently. */\n  if (!field._keyPath || field._keyPath.key !== field.key) {\n    const key = field.key.indexOf('[') === -1\n      ? field.key\n      : field.key.replace(/\\[(\\w+)\\]/g, '.$1');\n\n    field._keyPath = { key: field.key, path: key.indexOf('.') !== -1 ? key.split('.') : [key] };\n  }\n\n  return field._keyPath.path.slice(0);\n}\n\nexport const FORMLY_VALIDATORS = ['required', 'pattern', 'minLength', 'maxLength', 'min', 'max'];\n\nexport function assignModelValue(model: any, paths: string[], value: any) {\n  for (let i = 0; i < (paths.length - 1); i++) {\n    const path = paths[i];\n    if (!model[path] || !isObject(model[path])) {\n      model[path] = /^\\d+$/.test(paths[i + 1]) ? [] : {};\n    }\n\n    model = model[path];\n  }\n\n  model[paths[paths.length - 1]] = clone(value);\n}\n\nexport function getFieldValue(field: FormlyFieldConfig): any {\n  let model = field.parent.model;\n  for (const path of getKeyPath(field)) {\n    if (!model) {\n      return model;\n    }\n    model = model[path];\n  }\n\n  return model;\n}\n\nexport function reverseDeepMerge(dest: any, ...args: any[]) {\n  args.forEach(src => {\n    for (let srcArg in src) {\n      if (isNullOrUndefined(dest[srcArg]) || isBlankString(dest[srcArg])) {\n        dest[srcArg] = clone(src[srcArg]);\n      } else if (objAndSameType(dest[srcArg], src[srcArg])) {\n        reverseDeepMerge(dest[srcArg], src[srcArg]);\n      }\n    }\n  });\n  return dest;\n}\n\nexport function isNullOrUndefined(value: any) {\n  return value === undefined || value === null;\n}\n\nexport function isUndefined(value: any) {\n  return value === undefined;\n}\n\nexport function isBlankString(value: any) {\n  return value === '';\n}\n\nexport function isFunction(value: any) {\n  return typeof(value) === 'function';\n}\n\nexport function objAndSameType(obj1: any, obj2: any) {\n  return isObject(obj1) && isObject(obj2)\n    && Object.getPrototypeOf(obj1) === Object.getPrototypeOf(obj2)\n    && !(Array.isArray(obj1) || Array.isArray(obj2));\n}\n\nexport function isObject(x: any) {\n  return x != null && typeof x === 'object';\n}\n\nexport function isPromise(obj: any): obj is Promise<any> {\n  return !!obj && typeof obj.then === 'function';\n}\n\nexport function clone(value: any): any {\n  if (!isObject(value) || value instanceof RegExp || value instanceof Observable || /* instanceof SafeHtmlImpl */ value.changingThisBreaksApplicationSecurity) {\n    return value;\n  }\n\n  if (value instanceof AbstractControl) {\n    return null;\n  }\n\n  if (value instanceof Date) {\n    return new Date(value.getTime());\n  }\n\n  if (Array.isArray(value)) {\n    return value.slice(0).map(v => clone(v));\n  }\n\n  // best way to clone a js object maybe\n  // https://stackoverflow.com/questions/41474986/how-to-clone-a-javascript-es6-class-instance\n  const proto = Object.getPrototypeOf(value);\n  let c = Object.create(proto);\n  c = Object.setPrototypeOf(c, proto);\n  // need to make a deep copy so we dont use Object.assign\n  // also Object.assign wont copy property descriptor exactly\n  return Object.keys(value).reduce((newVal, prop) => {\n    const propDescriptor = Object.getOwnPropertyDescriptor(value, prop);\n\n    if (propDescriptor.get) {\n      Object.defineProperty(newVal, prop, { ...propDescriptor, get: () => clone(value[prop]) });\n    } else {\n      newVal[prop] = clone(value[prop]);\n    }\n\n    return newVal;\n  }, c);\n}\n\nexport function defineHiddenProp(field: any, prop: string, defaultValue: any) {\n  Object.defineProperty(field, prop, { enumerable: false, writable: true, configurable: true });\n  field[prop] = defaultValue;\n}\n\nexport function wrapProperty<T = any>(field, prop, setFn: (newVal: T, oldVal?: T) => void) {\n  let value = field[prop];\n  setFn(value);\n\n  Object.defineProperty(field, prop, {\n    configurable: true,\n    get: () => value,\n    set: newVal => {\n      if (newVal !== value) {\n        setFn(newVal, value);\n        value = newVal;\n      }\n    },\n  });\n}\n","import { Injectable, InjectionToken, ComponentRef, ComponentFactoryResolver, Injector } from '@angular/core';\nimport { ValidationErrors, AbstractControl } from '@angular/forms';\nimport { FieldType } from './../templates/field.type';\nimport { reverseDeepMerge, defineHiddenProp } from './../utils';\nimport { FormlyFieldConfig, FormlyFieldConfigCache } from '../components/formly.field.config';\n\nexport const FORMLY_CONFIG = new InjectionToken<FormlyConfig>('FORMLY_CONFIG');\n\n/** @experimental */\nexport interface FormlyExtension {\n  prePopulate?(field: FormlyFieldConfig): void;\n  onPopulate?(field: FormlyFieldConfig): void;\n  postPopulate?(field: FormlyFieldConfig): void;\n}\n\n/**\n * Maintains list of formly field directive types. This can be used to register new field templates.\n */\n@Injectable({ providedIn: 'root' })\nexport class FormlyConfig {\n  types: {[name: string]: TypeOption} = {};\n  validators: { [name: string]: ValidatorOption } = {};\n  wrappers: { [name: string]: WrapperOption } = {};\n  messages: { [name: string]: string | ((error: any, field: FormlyFieldConfig) => string); } = {};\n  templateManipulators: {\n    preWrapper: ManipulatorWrapper[];\n    postWrapper: ManipulatorWrapper[];\n  } = {\n    preWrapper: [],\n    postWrapper: [],\n  };\n  extras: ConfigOption['extras'] = {\n    checkExpressionOn: 'changeDetectionCheck',\n    showError: function(field: FieldType) {\n      return field.formControl && field.formControl.invalid && (field.formControl.touched || (field.options.parentForm && field.options.parentForm.submitted) || (field.field.validation && field.field.validation.show));\n    },\n  };\n  extensions: { [name: string]: FormlyExtension } = {};\n\n  addConfig(config: ConfigOption) {\n    if (config.types) {\n      config.types.forEach(type => this.setType(type));\n    }\n    if (config.validators) {\n      config.validators.forEach(validator => this.setValidator(validator));\n    }\n    if (config.wrappers) {\n      config.wrappers.forEach(wrapper => this.setWrapper(wrapper));\n    }\n    if (config.manipulators) {\n      console.warn(`NgxFormly: passing 'manipulators' config is deprecated, use custom extension instead.`);\n      config.manipulators.forEach(manipulator => this.setManipulator(manipulator));\n    }\n    if (config.validationMessages) {\n      config.validationMessages.forEach(validation => this.addValidatorMessage(validation.name, validation.message));\n    }\n    if (config.extensions) {\n      config.extensions.forEach(c => this.extensions[c.name] = c.extension);\n    }\n    if (config.extras) {\n      this.extras = { ...this.extras, ...config.extras };\n    }\n  }\n\n  setType(options: TypeOption | TypeOption[]) {\n    if (Array.isArray(options)) {\n      options.forEach((option) => this.setType(option));\n    } else {\n      if (!this.types[options.name]) {\n        this.types[options.name] = <TypeOption>{};\n      }\n      this.types[options.name].component = options.component;\n      this.types[options.name].name = options.name;\n      this.types[options.name].extends = options.extends;\n      this.types[options.name].defaultOptions = options.defaultOptions;\n      if (options.wrappers) {\n        options.wrappers.forEach((wrapper) => this.setTypeWrapper(options.name, wrapper));\n      }\n    }\n  }\n\n  getType(name: string): TypeOption {\n    if (!this.types[name]) {\n      throw new Error(`[Formly Error] There is no type by the name of \"${name}\"`);\n    }\n\n    this.mergeExtendedType(name);\n\n    return this.types[name];\n  }\n\n  getMergedField(field: FormlyFieldConfig = {}): any {\n    const type = this.getType(field.type);\n    if (type.defaultOptions) {\n      reverseDeepMerge(field, type.defaultOptions);\n    }\n\n    const extendDefaults = type.extends && this.getType(type.extends).defaultOptions;\n    if (extendDefaults) {\n      reverseDeepMerge(field, extendDefaults);\n    }\n\n    if (field && field.optionsTypes) {\n      field.optionsTypes.forEach(option => {\n        const defaultOptions = this.getType(option).defaultOptions;\n        if (defaultOptions) {\n          reverseDeepMerge(field, defaultOptions);\n        }\n      });\n    }\n\n    const componentRef = this.createComponent(field);\n    if (componentRef && componentRef.instance && componentRef.instance.defaultOptions) {\n      reverseDeepMerge(field, componentRef.instance.defaultOptions);\n    }\n\n    if (!field.wrappers && type.wrappers) {\n      field.wrappers = [...type.wrappers];\n    }\n  }\n\n  /** @internal */\n  createComponent(\n    field: FormlyFieldConfigCache = {},\n    resolver?: ComponentFactoryResolver,\n    injector?: Injector,\n  ): ComponentRef<FieldType> {\n    if (!field.type) {\n      return;\n    }\n\n    const cf = field._componentFactory;\n    if (cf && field.type === cf.type && (cf.componentRef && cf.componentRef.hostView && !cf.componentRef.hostView.destroyed)) {\n      return field._componentFactory.componentRef;\n    }\n\n    const type = this.getType(field.type);\n    if (!resolver) {\n      resolver = field.parent.options._componentFactoryResolver;\n    }\n    if (!injector) {\n      injector = this.getFieldInjector(field);\n    }\n\n    defineHiddenProp(field, '_componentFactory', {\n      type: field.type,\n      component: type.component,\n      componentRef: resolver\n        ? resolver.resolveComponentFactory(type.component).create(injector)\n        : null,\n    });\n\n    return field._componentFactory.componentRef;\n  }\n\n  setWrapper(options: WrapperOption) {\n    this.wrappers[options.name] = options;\n    if (options.types) {\n      options.types.forEach((type) => {\n        this.setTypeWrapper(type, options.name);\n      });\n    }\n  }\n\n  getWrapper(name: string): WrapperOption {\n    if (!this.wrappers[name]) {\n      throw new Error(`[Formly Error] There is no wrapper by the name of \"${name}\"`);\n    }\n\n    return this.wrappers[name];\n  }\n\n  setTypeWrapper(type: string, name: string) {\n    if (!this.types[type]) {\n      this.types[type] = <TypeOption>{};\n    }\n    if (!this.types[type].wrappers) {\n      this.types[type].wrappers = [];\n    }\n    if (this.types[type].wrappers.indexOf(name) === -1) {\n      this.types[type].wrappers.push(name);\n    }\n  }\n\n  setValidator(options: ValidatorOption) {\n    this.validators[options.name] = options;\n  }\n\n  getValidator(name: string): ValidatorOption {\n    if (!this.validators[name]) {\n      throw new Error(`[Formly Error] There is no validator by the name of \"${name}\"`);\n    }\n\n    return this.validators[name];\n  }\n\n  addValidatorMessage(name: string, message: string | ((error: any, field: FormlyFieldConfig) => string)) {\n    this.messages[name] = message;\n  }\n\n  getValidatorMessage(name: string) {\n    return this.messages[name];\n  }\n\n  setManipulator(manipulator: ManipulatorOption) {\n    new manipulator.class()[manipulator.method](this);\n  }\n\n  private mergeExtendedType(name: string) {\n    if (!this.types[name].extends) {\n      return;\n    }\n\n    const extendedType = this.getType(this.types[name].extends);\n    if (!this.types[name].component) {\n      this.types[name].component = extendedType.component;\n    }\n\n    if (!this.types[name].wrappers) {\n      this.types[name].wrappers = extendedType.wrappers;\n    }\n  }\n\n  private getFieldInjector(field: FormlyFieldConfigCache = {}) {\n    const parent = field.parent;\n    if (parent._componentFactory && parent._componentFactory.componentRef) {\n      return parent._componentFactory.componentRef.injector;\n    }\n\n    return parent.options._injector;\n  }\n}\nexport interface TypeOption {\n  name: string;\n  component?: any;\n  wrappers?: string[];\n  extends?: string;\n  defaultOptions?: FormlyFieldConfig;\n}\n\nexport interface WrapperOption {\n  name: string;\n  component: any;\n  types?: string[];\n}\n\nexport interface FieldValidatorFn {\n  (c: AbstractControl, field: FormlyFieldConfig): ValidationErrors | null;\n}\n\nexport interface ValidatorOption {\n  name: string;\n  validation: FieldValidatorFn;\n}\n\nexport interface ExtensionOption {\n  name: string;\n  extension: FormlyExtension;\n}\n\nexport interface ValidationMessageOption {\n  name: string;\n  message: string | ((error: any, field: FormlyFieldConfig) => string);\n}\n\nexport interface ManipulatorOption {\n  class?: { new (): any };\n  method?: string;\n}\n\nexport interface ManipulatorWrapper {\n  (f: FormlyFieldConfig): string;\n}\n\nexport interface TemplateManipulators {\n  preWrapper?: ManipulatorWrapper[];\n  postWrapper?: ManipulatorWrapper[];\n}\n\nexport interface ConfigOption {\n  types?: TypeOption[];\n  wrappers?: WrapperOption[];\n  validators?: ValidatorOption[];\n  extensions?: ExtensionOption[];\n  validationMessages?: ValidationMessageOption[];\n\n  /** @deprecated use `extensions` instead */\n  manipulators?: ManipulatorOption[];\n  extras?: {\n    /** @deprecated use `extensions` instead */\n    fieldTransform?: any,\n    immutable?: boolean,\n    showError?: (field: FieldType) => boolean;\n\n    /**\n     * Defines the option which formly rely on to check field expression properties.\n     * - `modelChange`: perform a check when the value of the form control changes.\n     * - `changeDetectionCheck`: triggers an immediate check when `ngDoCheck` is called.\n    */\n    checkExpressionOn?: 'modelChange' | 'changeDetectionCheck',\n  };\n}\n","import { Injectable, ComponentFactoryResolver, Injector } from '@angular/core';\nimport { FormGroup, FormArray } from '@angular/forms';\nimport { FormlyConfig } from './formly.config';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFieldConfigCache, FormlyValueChangeEvent, FormlyFormOptionsCache } from '../components/formly.field.config';\nimport { Subject } from 'rxjs';\nimport { defineHiddenProp } from '../utils';\n\n@Injectable({ providedIn: 'root' })\nexport class FormlyFormBuilder {\n  constructor(\n    private formlyConfig: FormlyConfig,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private injector: Injector,\n  ) {}\n\n  buildForm(formControl: FormGroup | FormArray, fieldGroup: FormlyFieldConfig[] = [], model: any, options: FormlyFormOptions) {\n    if (!this.formlyConfig.extensions.core) {\n      throw new Error('NgxFormly: missing `forRoot()` call. use `forRoot()` when registering the `FormlyModule`.');\n    }\n\n    this._buildForm({ fieldGroup, model, formControl, options: this._setOptions(options) });\n  }\n\n  private _buildForm(field: FormlyFieldConfigCache) {\n    this.getExtensions().forEach(extension => extension.prePopulate && extension.prePopulate(field));\n    this.getExtensions().forEach(extension => extension.onPopulate && extension.onPopulate(field));\n\n    if (field.fieldGroup) {\n      field.fieldGroup.forEach((f) => this._buildForm(f));\n    }\n\n    this.getExtensions().forEach(extension => extension.postPopulate && extension.postPopulate(field));\n  }\n\n  private getExtensions() {\n    return Object.keys(this.formlyConfig.extensions).map(name => this.formlyConfig.extensions[name]);\n  }\n\n  private _setOptions(options: FormlyFormOptionsCache) {\n    options = options || {};\n    options.formState = options.formState || {};\n\n    if (!options.showError) {\n      options.showError = this.formlyConfig.extras.showError;\n    }\n\n    if (!options.fieldChanges) {\n      defineHiddenProp(options, 'fieldChanges', new Subject<FormlyValueChangeEvent>());\n    }\n\n    if (!options._componentFactoryResolver) {\n      defineHiddenProp(options, '_componentFactoryResolver', this.componentFactoryResolver);\n    }\n\n    if (!options._injector) {\n      defineHiddenProp(options, '_injector', this.injector);\n    }\n\n    if (!options._markForCheck) {\n      options._markForCheck = (field) => {\n        if (field._componentRefs) {\n          field._componentRefs.forEach(ref => ref.changeDetectorRef.markForCheck());\n        }\n\n        if (field.fieldGroup) {\n          field.fieldGroup.forEach(f => options._markForCheck(f));\n        }\n      };\n    }\n\n    return options;\n  }\n}\n","import { Component, DoCheck, OnChanges, Input, SimpleChanges, Optional, EventEmitter, Output, OnDestroy, Attribute } from '@angular/core';\nimport { FormGroup, FormArray, FormGroupDirective } from '@angular/forms';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFormOptionsCache } from './formly.field.config';\nimport { FormlyFormBuilder } from '../services/formly.form.builder';\nimport { FormlyConfig } from '../services/formly.config';\nimport { assignModelValue, isNullOrUndefined, wrapProperty, clone, defineHiddenProp } from '../utils';\nimport { Subscription } from 'rxjs';\nimport { debounceTime } from 'rxjs/operators';\n\n@Component({\n  selector: 'formly-form',\n  template: `\n    <formly-field *ngFor=\"let field of fields\"\n      hide-deprecation\n      [form]=\"field.form\"\n      [options]=\"field.options\"\n      [model]=\"field.model\"\n      [field]=\"field\">\n    </formly-field>\n    <ng-content></ng-content>\n  `,\n  providers: [FormlyFormBuilder],\n})\nexport class FormlyForm implements DoCheck, OnChanges, OnDestroy {\n  @Input() form: FormGroup | FormArray;\n\n  @Input()\n  set model(model: any) { this._model = this.immutable ? clone(model) : model; }\n  get model() { return this._model || {}; }\n\n  @Input()\n  set fields(fields: FormlyFieldConfig[]) { this._fields = this.immutable ? clone(fields) : fields; }\n  get fields() { return this._fields || []; }\n\n  @Input()\n  set options(options: FormlyFormOptions) { this._options = this.immutable ? clone(options) : options; }\n  get options() { return this._options; }\n\n  @Output() modelChange = new EventEmitter<any>();\n\n  private immutable = false;\n  private _model: any;\n  private _fields: FormlyFieldConfig[];\n  private _options: FormlyFormOptions;\n  private initialModel: any;\n  private modelChangeSubs: Subscription[] = [];\n\n  private enableCheckExprDebounce = false;\n  private checkExpressionChange$ = this.modelChange.pipe(\n    debounceTime(this.enableCheckExprDebounce ? 100 : 0),\n  ).subscribe(() => {\n    this.enableCheckExprDebounce = true;\n    this.checkExpressionChange();\n    this.enableCheckExprDebounce = false;\n  });\n\n  constructor(\n    private formlyBuilder: FormlyFormBuilder,\n    private formlyConfig: FormlyConfig,\n    // tslint:disable-next-line\n    @Attribute('immutable') immutable,\n    @Optional() private parentFormGroup: FormGroupDirective,\n  ) {\n    this.immutable = (immutable !== null) || !!formlyConfig.extras.immutable;\n  }\n\n  ngDoCheck() {\n    if (this.formlyConfig.extras.checkExpressionOn === 'changeDetectionCheck') {\n      this.checkExpressionChange();\n    }\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.fields || changes.form || changes.model) {\n      this.form = this.form || (new FormGroup({}));\n      this.setOptions();\n      this.clearModelSubscriptions();\n      this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n      this.trackModelChanges(this.fields);\n      this.options.updateInitialValue();\n    }\n  }\n\n  ngOnDestroy() {\n    this.clearModelSubscriptions();\n    this.checkExpressionChange$.unsubscribe();\n  }\n\n  changeModel(event: { key: string, value: any }) {\n    assignModelValue(this.model, event.key.split('.'), event.value);\n    this.modelChange.emit(clone(this.model));\n  }\n\n  setOptions() {\n    if (!this.options) {\n      this.options = {};\n    }\n\n    if (!this.options.resetModel) {\n      this.options.resetModel = (model ?: any) => {\n        model = isNullOrUndefined(model) ? this.initialModel : model;\n        if (this.model) {\n          Object.keys(this.model).forEach(k => delete this.model[k]);\n          Object.assign(this.model, model || {});\n        }\n\n        (<FormlyFormOptionsCache> this.options)._buildForm();\n\n        // we should call `NgForm::resetForm` to ensure changing `submitted` state after resetting form\n        // but only when the current component is a root one.\n        if (this.options.parentForm && this.options.parentForm.control === this.form) {\n          this.options.parentForm.resetForm(model);\n        } else {\n          this.form.reset(model);\n        }\n      };\n    }\n\n    if (!this.options.parentForm && this.parentFormGroup) {\n      defineHiddenProp(this.options, 'parentForm', this.parentFormGroup);\n      wrapProperty(this.options.parentForm, 'submitted', (newVal, oldVal) => {\n        if (newVal !== !!oldVal) {\n          (<FormlyFormOptionsCache> this.options)._markForCheck({\n            fieldGroup: this.fields,\n            model: this.model,\n            formControl: this.form,\n            options: this.options,\n          });\n        }\n      });\n    }\n\n    if (!this.options.updateInitialValue) {\n      this.options.updateInitialValue = () => this.initialModel = clone(this.model);\n    }\n\n    if (!(<FormlyFormOptionsCache> this.options)._buildForm) {\n      (<FormlyFormOptionsCache> this.options)._buildForm = (emitModelChange = false) => {\n        this.clearModelSubscriptions();\n        this.formlyBuilder.buildForm(this.form, this.fields, this.model, this.options);\n        this.trackModelChanges(this.fields);\n\n        if (emitModelChange) {\n          this.modelChange.emit(clone(this.model));\n        }\n      };\n    }\n  }\n\n  private checkExpressionChange() {\n    if (this.options && (<FormlyFormOptionsCache> this.options)._checkField) {\n      (<FormlyFormOptionsCache> this.options)._checkField({\n        fieldGroup: this.fields,\n        model: this.model,\n        formControl: this.form,\n        options: this.options,\n      });\n    }\n  }\n\n  private trackModelChanges(fields: FormlyFieldConfig[], rootKey: string[] = []) {\n    fields.forEach(field => {\n      if (field.key && !field.fieldGroup) {\n        const valueChanges = field.modelOptions.debounce && field.modelOptions.debounce.default\n          ? field.formControl.valueChanges.pipe(debounceTime(field.modelOptions.debounce.default))\n          : field.formControl.valueChanges;\n\n        this.modelChangeSubs.push(valueChanges.subscribe(value => {\n          if (field.parsers && field.parsers.length > 0) {\n            field.parsers.forEach(parserFn => value = parserFn(value));\n          }\n\n          this.changeModel({ key: [...rootKey, field.key].join('.'), value });\n        }));\n      }\n\n      if (field.fieldGroup && field.fieldGroup.length > 0) {\n        this.trackModelChanges(field.fieldGroup, field.key ? [...rootKey, field.key] : rootKey);\n      }\n    });\n  }\n\n  private clearModelSubscriptions() {\n    this.modelChangeSubs.forEach(sub => sub.unsubscribe());\n    this.modelChangeSubs = [];\n  }\n}\n","import {\n  Component, EventEmitter, Input, Output, Type,\n  ViewContainerRef, ViewChild, ComponentRef, SimpleChanges, Attribute, ComponentFactoryResolver,\n  OnInit, OnChanges, OnDestroy, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, Injector,\n} from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyConfig } from '../services/formly.config';\nimport { FormlyFieldConfig, FormlyFormOptions, FormlyFieldConfigCache } from './formly.field.config';\nimport { defineHiddenProp } from '../utils';\nimport { FieldWrapper } from '../templates/field.wrapper';\nimport { FieldType } from '../templates/field.type';\n\n@Component({\n  selector: 'formly-field',\n  template: `<ng-template #container></ng-template>`,\n  host: {\n    '[style.display]': 'field.hide ? \"none\":\"\"',\n    '[class]': 'field.className? field.className : className',\n  },\n})\nexport class FormlyField implements OnInit, OnChanges, DoCheck, AfterContentInit, AfterContentChecked, AfterViewInit, AfterViewChecked, OnDestroy {\n  @Input() field: FormlyFieldConfig;\n  @Input('class') className: string = '';\n\n  warnDeprecation = false;\n\n  @Input() set model(m: any) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Input() set form(form: FormGroup) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Input() set options(options: FormlyFormOptions) {\n    this.warnDeprecation && console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);\n  }\n\n  @Output() modelChange: EventEmitter<any> = new EventEmitter();\n  // TODO: remove `any`, once dropping angular `V7` support.\n  @ViewChild('container', <any> {read: ViewContainerRef, static: true }) containerRef: ViewContainerRef;\n\n  refsUnsubscribe = () => {};\n\n  constructor(\n    private formlyConfig: FormlyConfig,\n    private componentFactoryResolver: ComponentFactoryResolver,\n    private injector: Injector,\n    // tslint:disable-next-line\n    @Attribute('hide-deprecation') hideDeprecation,\n  ) {\n    this.warnDeprecation = hideDeprecation === null;\n  }\n\n  ngAfterContentInit() {\n    this.triggerHook('afterContentInit');\n  }\n\n  ngAfterContentChecked() {\n    this.triggerHook('afterContentChecked');\n  }\n\n  ngAfterViewInit() {\n    this.triggerHook('afterViewInit');\n  }\n\n  ngAfterViewChecked() {\n    this.triggerHook('afterViewChecked');\n  }\n\n  ngDoCheck() {\n    this.triggerHook('doCheck');\n  }\n\n  ngOnInit() {\n    this.triggerHook('onInit');\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.field) {\n      this.refsUnsubscribe = this.renderField(this.field, this.containerRef);\n    }\n\n    this.triggerHook('onChanges', changes);\n  }\n\n  ngOnDestroy() {\n    this.triggerHook('onDestroy');\n    this.refsUnsubscribe();\n  }\n\n  private renderField(f: FormlyFieldConfigCache, containerRef: ViewContainerRef) {\n    this.refsUnsubscribe();\n    (f.wrappers || []).forEach(wrapper => {\n      containerRef = this.createWrapperRef(f, containerRef, this.formlyConfig.getWrapper(wrapper));\n    });\n\n    const ref = this.formlyConfig.createComponent(f, this.componentFactoryResolver, this.injector);\n    if (ref) {\n      containerRef.insert(ref.hostView);\n      this.attachComponentRef(ref, f);\n    }\n\n    return () => {\n      (f._componentRefs || []).forEach(componentRef => componentRef.destroy());\n      f._componentRefs = [];\n    };\n  }\n\n  private triggerHook(name: string, changes?: SimpleChanges) {\n    if (this.field.hooks && this.field.hooks[name]) {\n      if (!changes || changes.field) {\n        this.field.hooks[name](this.field);\n      }\n    }\n\n    if (this.field.lifecycle && this.field.lifecycle[name]) {\n      this.field.lifecycle[name](\n        this.field.form,\n        this.field,\n        this.field.model,\n        this.field.options,\n      );\n    }\n  }\n\n  private createWrapperRef<T extends FieldWrapper>(\n    field: FormlyFieldConfigCache,\n    containerRef: ViewContainerRef,\n    config: { component: Type<T>; },\n  ) {\n    const cfr = field.options && field.options._componentFactoryResolver\n      ? field.options._componentFactoryResolver\n      : this.componentFactoryResolver;\n\n    const ref = containerRef.createComponent<T>(cfr.resolveComponentFactory(config.component));\n    this.attachComponentRef(ref, field);\n\n    if (!ref.instance.fieldComponent) {\n      throw Error(`${config.component.prototype.constructor.name}#fieldComponent: missing 'static' flag for '@ViewChild' query, it should be explicitly defined by '@ViewChild(..., { static: true })'.`);\n    }\n\n    return ref.instance.fieldComponent;\n  }\n\n  private attachComponentRef<T extends FieldType>(ref: ComponentRef<T>, field: FormlyFieldConfigCache) {\n    if (field._componentRefs) {\n      field._componentRefs.push(ref);\n    } else {\n      defineHiddenProp(field, '_componentRefs', [ref]);\n    }\n    Object.assign(ref.instance, { field });\n  }\n}\n","import { Directive, ElementRef, Input, OnChanges, SimpleChanges, Renderer2, DoCheck, Inject, OnDestroy } from '@angular/core';\nimport { FormlyFieldConfig, FormlyTemplateOptions } from './formly.field.config';\nimport { wrapProperty, defineHiddenProp, FORMLY_VALIDATORS } from '../utils';\nimport { DOCUMENT } from '@angular/common';\n\n@Directive({\n  selector: '[formlyAttributes]',\n  host: {\n    '[attr.name]': 'field.name',\n    '[attr.step]': 'to.step',\n\n    '(focus)': 'onFocus($event)',\n    '(blur)': 'onBlur($event)',\n    '(keyup)': 'to.keyup && to.keyup(field, $event)',\n    '(keydown)': 'to.keydown && to.keydown(field, $event)',\n    '(click)': 'to.click && to.click(field, $event)',\n    '(change)': 'onChange($event)',\n    '(keypress)': 'to.keypress && to.keypress(field, $event)',\n  },\n})\nexport class FormlyAttributes implements OnChanges, DoCheck, OnDestroy {\n  @Input('formlyAttributes') field: FormlyFieldConfig;\n\n  private document: Document;\n  private uiAttributesCache: any = {};\n  private uiAttributes = [\n    ...FORMLY_VALIDATORS,\n    'tabindex',\n    'placeholder',\n    'readonly',\n    'disabled',\n  ];\n\n  get to(): FormlyTemplateOptions { return this.field.templateOptions || {}; }\n\n  private get fieldAttrElements() { return (this.field && this.field['_attrElements']) || []; }\n\n  constructor(\n    private renderer: Renderer2,\n    private elementRef: ElementRef,\n    @Inject(DOCUMENT) _document: any,\n  ) {\n    this.document = _document;\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.field) {\n      this.renderer.setAttribute(this.elementRef.nativeElement, 'id', this.field.id);\n      if (this.to && this.to.attributes) {\n        wrapProperty(this.to, 'attributes', (newVal, oldValue) => {\n          if (oldValue) {\n            Object.keys(oldValue).forEach(attr => this.renderer.removeAttribute(this.elementRef.nativeElement, attr));\n          }\n\n          if (newVal) {\n            Object.keys(newVal).forEach(attr => this.setAttribute(attr, newVal[attr]));\n          }\n        });\n      }\n\n      this.attachAttrElement();\n      if (this.fieldAttrElements.length === 1) {\n        wrapProperty(this.field, 'focus', (value) => {\n          const element = this.fieldAttrElements ? this.fieldAttrElements[0] : null;\n          if (!element) {\n            return;\n          }\n\n          this.focusElement(element, value);\n        });\n      }\n    }\n  }\n\n  /**\n   * We need to re-evaluate all the attributes on every change detection cycle, because\n   * by using a HostBinding we run into certain edge cases. This means that whatever logic\n   * is in here has to be super lean or we risk seriously damaging or destroying the performance.\n   *\n   * Formly issue: https://github.com/ngx-formly/ngx-formly/issues/1317\n   * Material issue: https://github.com/angular/material2/issues/14024\n   */\n  ngDoCheck() {\n    this.uiAttributes.forEach(attr => {\n      const value = this.to[attr];\n      if (this.uiAttributesCache[attr] !== value) {\n        this.uiAttributesCache[attr] = value;\n        if (value || value === 0) {\n          this.setAttribute(attr, value === true ? attr : `${value}`);\n        } else {\n          this.renderer.removeAttribute(this.elementRef.nativeElement, attr);\n        }\n      }\n    });\n  }\n\n  ngOnDestroy() {\n    this.detachAttrElement();\n  }\n\n  focusElement(element, value: boolean) {\n    if (!element.focus) {\n      return;\n    }\n\n    const isFocused = !!this.document.activeElement\n      && this.fieldAttrElements\n        .some(element => this.document.activeElement === element || element.contains(this.document.activeElement));\n\n    if (value && !isFocused) {\n      element.focus();\n    } else if (!value && isFocused) {\n      element.blur();\n    }\n  }\n\n  onFocus($event: any) {\n    if (!this.field.focus) {\n      this.field.focus = true;\n    }\n\n    if (this.to.focus) {\n      this.to.focus(this.field, $event);\n    }\n  }\n\n  onBlur($event: any) {\n    if (this.field.focus) {\n      this.field.focus = false;\n    }\n\n    if (this.to.blur) {\n      this.to.blur(this.field, $event);\n    }\n  }\n\n  onChange($event: any) {\n    if (this.to.change) {\n      this.to.change(this.field, $event);\n    }\n\n    if (this.field.formControl) {\n      this.field.formControl.markAsDirty();\n    }\n  }\n\n  private attachAttrElement() {\n    if (this.field['_attrElements']) {\n      this.field['_attrElements'].push(this.elementRef.nativeElement);\n    } else {\n      defineHiddenProp(this.field, '_attrElements', [this.elementRef.nativeElement]);\n    }\n  }\n\n  private detachAttrElement() {\n    const index = this.fieldAttrElements.findIndex(element => element !== this.elementRef.nativeElement);\n    if (index !== -1) {\n      this.field['_attrElements'].splice(index, 1);\n    }\n  }\n\n  private setAttribute(attr: string, value: string) {\n    this.renderer.setAttribute(this.elementRef.nativeElement, attr, value);\n  }\n}\n","import { Input } from '@angular/core';\nimport { FormGroup } from '@angular/forms';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\n\nexport abstract class FieldType<F extends FormlyFieldConfig = FormlyFieldConfig> {\n  @Input() field: F;\n  defaultOptions?: F;\n\n  @Input()\n  get model() { return this.field.model; }\n  set model(m: any) { console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  @Input()\n  get form() { return <FormGroup> this.field.parent.formControl; }\n  set form(form) { console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  @Input()\n  get options() { return this.field.options; }\n  set options(options: F['options']) { console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`); }\n\n  get key() { return this.field.key; }\n\n  get formControl() { return this.field.formControl; }\n\n  get to() { return this.field.templateOptions || {}; }\n\n  get showError(): boolean { return this.options.showError(this); }\n\n  get id(): string { return this.field.id; }\n\n  get formState() { return this.options.formState || {}; }\n}\n\n/**\n * @deprecated use `FieldType` instead\n */\nexport abstract class Field extends FieldType {\n  constructor() {\n    super();\n    console.warn(`NgxFormly: 'Field' has been renamed to 'FieldType', extend 'FieldType' instead.`);\n  }\n}\n","import { FormArray, FormGroup, FormControl } from '@angular/forms';\nimport { FormlyFieldConfig } from '../../core';\nimport { getKeyPath, getFieldValue, isNullOrUndefined, defineHiddenProp } from '../../utils';\n\nexport function unregisterControl(field: FormlyFieldConfig) {\n  const form = field.formControl.parent as FormArray | FormGroup;\n  if (form instanceof FormArray) {\n    const key = form.controls.findIndex(c => c === field.formControl);\n    if (key !== -1) {\n      form.removeAt(key);\n      field.formControl.setParent(null);\n    }\n  } else if (form instanceof FormGroup) {\n    const paths = getKeyPath(field);\n    const key = paths[paths.length - 1];\n    if (form.get([key]) === field.formControl) {\n      form.removeControl(key);\n    }\n    field.formControl.setParent(null);\n  }\n}\n\nexport function registerControl(field: FormlyFieldConfig, control?: any) {\n  control = control || field.formControl;\n  if (!field.formControl && control) {\n    defineHiddenProp(field, 'formControl', control);\n    if (field.templateOptions.disabled && control.enabled) {\n      control.disable();\n    }\n\n    if (delete field.templateOptions.disabled) {\n      Object.defineProperty(field.templateOptions, 'disabled', {\n        get: () => !field.formControl.enabled,\n        set: (value: boolean) => value ? field.formControl.disable() : field.formControl.enable(),\n        enumerable: true,\n        configurable: true,\n      });\n    }\n  }\n\n  let parent = field.parent.formControl as FormGroup;\n  if (!parent) {\n    return;\n  }\n\n  const paths = getKeyPath(field);\n  for (let i = 0; i < (paths.length - 1); i++) {\n    const path = paths[i];\n    if (!parent.get([path])) {\n      registerControl({\n        key: path,\n        formControl: new FormGroup({}),\n        parent: { formControl: parent },\n      });\n    }\n\n    parent = <FormGroup> parent.get([path]);\n  }\n\n  const value = getFieldValue(field);\n  if (\n    !(isNullOrUndefined(control.value) && isNullOrUndefined(value))\n    && control.value !== value\n    && control instanceof FormControl\n  ) {\n    control.patchValue(value);\n  }\n  const key = paths[paths.length - 1];\n  if (parent.get([key]) !== control) {\n    parent.setControl(key, control);\n  }\n}\n","import { Inject, Optional } from '@angular/core';\nimport { FormArray } from '@angular/forms';\nimport { FieldType } from './field.type';\nimport { clone, isNullOrUndefined } from '../utils';\nimport { FormlyFormBuilder } from '../services/formly.form.builder';\nimport { FormlyFieldConfig, FormlyFieldConfigCache } from '../components/formly.field.config';\nimport { FORMLY_CONFIG, FormlyExtension } from '../services/formly.config';\nimport { registerControl } from '../extensions/field-form/utils';\n\nexport abstract class FieldArrayType<F extends FormlyFieldConfig = FormlyFieldConfig> extends FieldType<F> implements FormlyExtension {\n  formControl: FormArray;\n  defaultOptions: any = {\n    defaultValue: [],\n  };\n\n  constructor(@Inject(FORMLY_CONFIG) @Optional() builder?: FormlyFormBuilder) {\n    super();\n\n    if (builder instanceof FormlyFormBuilder) {\n      console.warn(`NgxFormly: passing 'FormlyFormBuilder' to '${this.constructor.name}' type is not required anymore, you may remove it!`);\n    }\n  }\n\n  onPopulate(field: FormlyFieldConfig) {\n    field.fieldGroup = field.fieldGroup || [];\n    if (field.fieldGroup.length > field.model.length) {\n      for (let i = field.fieldGroup.length; i >= field.model.length; --i) {\n        (field.formControl as FormArray).removeAt(i);\n        field.fieldGroup.splice(i, 1);\n      }\n    }\n\n    for (let i = field.fieldGroup.length; i < field.model.length; i++) {\n      const f = { ...clone(field.fieldArray), key: `${i}` };\n      field.fieldGroup.push(f);\n    }\n  }\n\n  postPopulate(field: FormlyFieldConfigCache) {\n    if (field.formControl) {\n      return;\n    }\n\n    registerControl(field, new FormArray(\n      field.fieldGroup.map(f => f.formControl),\n      {\n        validators: field._validators,\n        asyncValidators: field._asyncValidators,\n        updateOn: field.modelOptions.updateOn,\n      },\n    ));\n  }\n\n  add(i?: number, initialModel?: any) {\n    i = isNullOrUndefined(i) ? this.field.fieldGroup.length : i;\n    this.model.splice(i, 0, initialModel ? clone(initialModel) : undefined);\n\n    (<any> this.options)._buildForm(true);\n  }\n\n  remove(i: number) {\n    this.model.splice(i, 1);\n    this.formControl.removeAt(i);\n    this.field.fieldGroup.splice(i, 1);\n    this.field.fieldGroup.forEach((f, key) => f.key = `${key}`);\n\n    (<any> this.options)._buildForm(true);\n  }\n}\n","import { ViewContainerRef, ViewChild } from '@angular/core';\nimport { FieldType } from './field.type';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\n\nexport abstract class FieldWrapper<F extends FormlyFieldConfig = FormlyFieldConfig> extends FieldType<F> {\n  // TODO: remove `any`, once dropping angular `V7` support.\n  @ViewChild('fieldComponent', <any>{ read: ViewContainerRef, static: true }) fieldComponent: ViewContainerRef;\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from './field.type';\n\n@Component({\n  selector: 'formly-group',\n  template: `\n    <formly-field *ngFor=\"let f of field.fieldGroup\" [field]=\"f\"></formly-field>\n    <ng-content></ng-content>\n  `,\n  host: {\n    '[class]': 'field.fieldGroupClassName || \"\"',\n  },\n})\nexport class FormlyGroup extends FieldType {\n  defaultOptions = {\n    defaultValue: {},\n  };\n}\n","import { Component, Input } from '@angular/core';\nimport { FormlyConfig } from '../services/formly.config';\nimport { FormlyFieldConfig } from '../components/formly.field.config';\nimport { isObject } from '../utils';\n\n@Component({\n  selector: 'formly-validation-message',\n  template: `{{ errorMessage }}`,\n})\nexport class FormlyValidationMessage {\n  @Input() field: FormlyFieldConfig;\n\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  get errorMessage(): string {\n    const fieldForm = this.field.formControl;\n    for (let error in fieldForm.errors) {\n      if (fieldForm.errors.hasOwnProperty(error)) {\n        let message: string | Function = this.formlyConfig.getValidatorMessage(error);\n\n        if (isObject(fieldForm.errors[error])) {\n          if (fieldForm.errors[error].errorPath) {\n            return;\n          }\n\n          if (fieldForm.errors[error].message) {\n            message = fieldForm.errors[error].message;\n          }\n        }\n\n        if (this.field.validation && this.field.validation.messages && this.field.validation.messages[error]) {\n          message = this.field.validation.messages[error];\n        }\n\n        if (this.field.validators && this.field.validators[error] && this.field.validators[error].message) {\n          message = this.field.validators[error].message;\n        }\n\n        if (this.field.asyncValidators && this.field.asyncValidators[error] && this.field.asyncValidators[error].message) {\n          message = this.field.asyncValidators[error].message;\n        }\n\n        if (typeof message === 'function') {\n          return message(fieldForm.errors[error], this.field);\n        }\n\n        return message;\n      }\n    }\n  }\n}\n","import { Component } from '@angular/core';\nimport { FieldType } from './field.type';\n\n@Component({\n  selector: 'formly-template',\n  template: `<div [innerHtml]=\"field.template\"></div>`,\n})\nexport class FormlyTemplateType extends FieldType {}\n","export function evalStringExpression(expression: string, argNames: string[]) {\n  try {\n    if (expression.indexOf('this.field') !== -1) {\n      console.warn(`NgxFormly: using 'this.field' in expressionProperties is deprecated since v5.1, use 'field' instead.`);\n    }\n\n    return Function(...argNames, `return ${expression};`) as any;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function evalExpressionValueSetter(expression: string, argNames: string[]) {\n  try {\n    return Function(...argNames, `${expression} = expressionValue;`) as (value: any) => void;\n  } catch (error) {\n    console.error(error);\n  }\n}\n\nexport function evalExpression(expression: string | Function | boolean, thisArg: any, argVal: any[]): any {\n  if (expression instanceof Function) {\n    return expression.apply(thisArg, argVal);\n  } else {\n    return expression ? true : false;\n  }\n}\n","import { FormlyFieldConfig, FormlyValueChangeEvent, FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { isObject, isNullOrUndefined, isFunction, FORMLY_VALIDATORS, defineHiddenProp } from '../../utils';\nimport { evalExpression, evalStringExpression, evalExpressionValueSetter } from './utils';\nimport { Observable } from 'rxjs';\nimport { FormlyExtension } from '../../services/formly.config';\nimport { unregisterControl, registerControl } from '../field-form/utils';\n\n/** @experimental */\nexport class FieldExpressionExtension implements FormlyExtension {\n  prePopulate(field: FormlyFieldConfigCache) {\n    if (field.parent || field.options._checkField) {\n      return;\n    }\n\n    field.options._checkField = (f, ignoreCache) => this._checkField(f, ignoreCache);\n  }\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    if (!field.parent || field._expressionProperties) {\n      return;\n    }\n\n    // cache built expression\n    defineHiddenProp(field, '_expressionProperties', {});\n\n    if (field.expressionProperties) {\n      for (const key in field.expressionProperties) {\n        const expressionProperty = field.expressionProperties[key],\n          expressionValueSetter = evalExpressionValueSetter(\n            `field.${key}`,\n            ['expressionValue', 'model', 'field'],\n          );\n\n        if (typeof expressionProperty === 'string' || isFunction(expressionProperty)) {\n          field._expressionProperties[key] = {\n            expression: this._evalExpression(\n              expressionProperty,\n              field.parent.expressionProperties && field.parent.expressionProperties.hasOwnProperty('templateOptions.disabled')\n                ? () => field.parent.templateOptions.disabled\n                : undefined,\n            ),\n            expressionValueSetter,\n          };\n          if (key === 'templateOptions.disabled') {\n            Object.defineProperty(field._expressionProperties[key], 'expressionValue', {\n              get: () => field.templateOptions.disabled,\n              set: () => { },\n              enumerable: true,\n              configurable: true,\n            });\n          }\n        } else if (expressionProperty instanceof Observable) {\n          const subscription = (expressionProperty as Observable<any>)\n            .subscribe(v => evalExpression(expressionValueSetter, { field }, [v, field.model, field]));\n\n          const onDestroy = field.hooks.onDestroy;\n          field.hooks.onDestroy = (field) => {\n            onDestroy && onDestroy(field);\n            subscription.unsubscribe();\n          };\n        }\n      }\n    }\n\n    if (field.hideExpression) {\n      // delete hide value in order to force re-evaluate it in FormlyFormExpression.\n      delete field.hide;\n\n      let parent = field.parent;\n      while (parent && !parent.hideExpression) {\n        parent = parent.parent;\n      }\n\n      field.hideExpression = this._evalExpression(\n        field.hideExpression,\n        parent && parent.hideExpression ? () => parent.hide : undefined,\n      );\n    }\n  }\n\n  postPopulate(field: FormlyFieldConfigCache) {\n    if (field.parent) {\n      return;\n    }\n\n    field.options._checkField(field, true);\n  }\n\n  private _evalExpression(expression, parentExpression?) {\n    expression = expression || (() => false);\n    if (typeof expression === 'string') {\n      expression = evalStringExpression(expression, ['model', 'formState', 'field']);\n    }\n\n    return parentExpression\n      ? (model: any, formState: any, field: FormlyFieldConfig) => parentExpression() || expression(model, formState, field)\n      : expression;\n  }\n\n  private _checkField(field: FormlyFieldConfigCache, ignoreCache = false) {\n    let markForCheck = false;\n    field.fieldGroup.forEach(f => {\n      this.checkFieldExpressionChange(f, ignoreCache) && (markForCheck = true);\n      this.checkFieldVisibilityChange(f, ignoreCache) && (markForCheck = true);\n\n      if (f.fieldGroup && f.fieldGroup.length > 0) {\n        this._checkField(f, ignoreCache);\n      }\n    });\n\n    if (markForCheck && field.options && field.options._markForCheck) {\n      field.options._markForCheck(field);\n    }\n  }\n\n  private checkFieldExpressionChange(field: FormlyFieldConfigCache, ignoreCache): boolean {\n    if (!field || !field._expressionProperties) {\n      return false;\n    }\n\n    let markForCheck = false;\n    const expressionProperties = field._expressionProperties;\n    const validators = FORMLY_VALIDATORS.map(v => `templateOptions.${v}`);\n\n    for (const key in expressionProperties) {\n      let expressionValue = evalExpression(expressionProperties[key].expression, { field }, [field.model, field.options.formState, field]);\n      if (key === 'templateOptions.disabled') {\n        expressionValue = !!expressionValue;\n      }\n\n      if (\n        ignoreCache || (\n          expressionProperties[key].expressionValue !== expressionValue\n          && (!isObject(expressionValue) || JSON.stringify(expressionValue) !== JSON.stringify(expressionProperties[key].expressionValue))\n        )\n      ) {\n        markForCheck = true;\n        expressionProperties[key].expressionValue = expressionValue;\n        evalExpression(\n          expressionProperties[key].expressionValueSetter,\n          { field },\n          [expressionValue, field.model, field],\n        );\n\n        if (key.indexOf('model.') === 0) {\n          const path = key.replace(/^model\\./, ''),\n            control = field.key && key === path ? field.formControl : field.parent.formControl.get(path);\n\n          if (\n            control\n            && !(isNullOrUndefined(control.value) && isNullOrUndefined(expressionValue))\n            && control.value !== expressionValue\n          ) {\n            control.patchValue(expressionValue);\n          }\n        }\n\n        if (validators.indexOf(key) !== -1 && field.formControl) {\n          field.formControl.updateValueAndValidity({ emitEvent: false });\n        }\n      }\n    }\n\n    return markForCheck;\n  }\n\n  private checkFieldVisibilityChange(field: FormlyFieldConfigCache, ignoreCache): boolean {\n    if (!field || isNullOrUndefined(field.hideExpression)) {\n      return false;\n    }\n\n    const hideExpressionResult: boolean = !!evalExpression(\n      field.hideExpression,\n      { field },\n      [field.model, field.options.formState, field],\n    );\n    let markForCheck = false;\n    if (hideExpressionResult !== field.hide || ignoreCache) {\n      markForCheck = true;\n      // toggle hide\n      field.hide = hideExpressionResult;\n      field.templateOptions.hidden = hideExpressionResult;\n      this.toggleFormControl(field, hideExpressionResult);\n    }\n\n    return markForCheck;\n  }\n\n  private toggleFormControl(field: FormlyFieldConfig, hide: boolean) {\n    if (field.fieldGroup) {\n      field.fieldGroup\n        .filter(f => !f.hideExpression)\n        .forEach(f => this.toggleFormControl(f, hide));\n    }\n\n    if (field.formControl && field.key) {\n      if (hide === true && field.formControl.parent) {\n        unregisterControl(field);\n      } else if (hide === false && !field.formControl.parent) {\n        registerControl(field);\n      }\n    }\n\n    if (field.options.fieldChanges) {\n      field.options.fieldChanges.next(<FormlyValueChangeEvent> { field: field, type: 'hidden', value: hide });\n    }\n  }\n}\n","import { FormlyExtension, FieldValidatorFn, FormlyConfig } from '../../services/formly.config';\nimport { FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { AbstractControl, Validators, ValidatorFn } from '@angular/forms';\nimport { isObject, FORMLY_VALIDATORS, defineHiddenProp, isUndefined, isPromise } from '../../utils';\n\n/** @experimental */\nexport class FieldValidationExtension implements FormlyExtension {\n  constructor(private formlyConfig: FormlyConfig) {}\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    if (!field.parent || !field.key) {\n      return;\n    }\n\n    this.initFieldValidation(field, 'validators');\n    this.initFieldValidation(field, 'asyncValidators');\n  }\n\n  private initFieldValidation(field: FormlyFieldConfigCache, type: 'validators' | 'asyncValidators') {\n    if (!isUndefined(field['_' + type])) {\n      // Avoid overriding existing validators defined through directive (https://github.com/ngx-formly/ngx-formly/issues/1578)\n      if (field.formControl) {\n        const validator = type === 'validators' ? field.formControl.validator : field.formControl.asyncValidator;\n        if (field['_' + type] !== validator) {\n          field['_' + type] = validator;\n        }\n      }\n\n      return;\n    }\n\n    const validators: ValidatorFn[] = type === 'validators' ? this.getPredefinedFieldValidation(field) : [];\n    if (field[type]) {\n      for (const validatorName in field[type]) {\n        if (validatorName === 'validation' && !Array.isArray(field[type].validation)) {\n          field[type].validation = [field[type].validation];\n          console.warn(`NgxFormly(${field.key}): passing a non array value to the 'validation' is deprecated, pass an array instead`);\n        }\n\n        validatorName === 'validation'\n          ? validators.push(...field[type].validation.map(v => this.wrapNgValidatorFn(field, v)))\n          : validators.push(this.wrapNgValidatorFn(field, field[type][validatorName], validatorName))\n        ;\n      }\n    }\n\n    defineHiddenProp(\n      field,\n      '_' + type,\n      type === 'validators' ? Validators.compose(validators) : Validators.composeAsync(validators as any),\n    );\n  }\n\n  private getPredefinedFieldValidation(field: FormlyFieldConfigCache): ValidatorFn[] {\n    return FORMLY_VALIDATORS\n      .filter(opt => (field.templateOptions && field.templateOptions.hasOwnProperty(opt)) || (field.expressionProperties && field.expressionProperties[`templateOptions.${opt}`]))\n      .map((opt) => (control: AbstractControl) => {\n        const value = field.templateOptions[opt];\n        if (value === false) {\n          return null;\n        }\n        switch (opt) {\n          case 'required':\n            return Validators.required(control);\n          case 'pattern':\n            return Validators.pattern(value)(control);\n          case 'minLength':\n            return Validators.minLength(value)(control);\n          case 'maxLength':\n            return Validators.maxLength(value)(control);\n          case 'min':\n            return Validators.min(value)(control);\n          case 'max':\n            return Validators.max(value)(control);\n        }\n      });\n  }\n\n  private wrapNgValidatorFn(field: FormlyFieldConfigCache, validator: string | FieldValidatorFn, validatorName?: string) {\n    return (control: AbstractControl) => {\n      let validatorFn = validator as FieldValidatorFn;\n      if (typeof validator === 'string') {\n        validatorFn = this.formlyConfig.getValidator(validator).validation;\n      }\n      if (isObject(validator)) {\n        validatorFn = (validator as any).expression;\n      }\n\n      const isValid = validatorFn(control, field);\n      if (validatorName) {\n        if (isPromise(isValid)) {\n          return isValid.then((result: boolean) => {\n            // workaround for https://github.com/angular/angular/issues/13200\n            if (field.options && field.options._markForCheck) {\n              field.options._markForCheck(field);\n            }\n\n            return this.handleResult(field, result, { validatorName, validator });\n          });\n        }\n\n        return this.handleResult(field, isValid, { validatorName, validator });\n      }\n\n      return isValid;\n    };\n  }\n\n  private handleResult(field: FormlyFieldConfigCache, isValid, { validatorName, validator }) {\n    if (isObject(validator) && field.formControl && validator.errorPath) {\n      const control = field.formControl.get(validator.errorPath);\n      if (control) {\n        const controlErrors = (control.errors || {});\n        if (!isValid) {\n          control.setErrors({ ...controlErrors, [validatorName]: { message: validator.message } });\n        } else {\n          delete controlErrors[validatorName];\n          control.setErrors(Object.keys(controlErrors).length === 0 ? null : controlErrors);\n        }\n      }\n\n      return isValid ? null : { [validatorName]: { errorPath: validator.errorPath } };\n    }\n\n    return isValid ? null : { [validatorName]: true };\n  }\n}\n","import { FormlyExtension } from '../../services/formly.config';\nimport { FormlyFieldConfigCache } from '../../components/formly.field.config';\nimport { AbstractControl, FormGroup, FormControl, AbstractControlOptions } from '@angular/forms';\nimport { getKeyPath, getFieldValue, defineHiddenProp } from '../../utils';\nimport { registerControl } from './utils';\n\n/** @experimental */\nexport class FieldFormExtension implements FormlyExtension {\n  onPopulate(field: FormlyFieldConfigCache) {\n    // TODO: add an option to skip extension\n    if (field.fieldArray) {\n      return;\n    }\n\n    if (field.key) {\n      this.addFormControl(field);\n    }\n\n    if (field.parent && field.fieldGroup && !field.key) {\n      defineHiddenProp(field, 'formControl', field.parent.formControl);\n    }\n  }\n\n  private addFormControl(field: FormlyFieldConfigCache) {\n    const controlOptions: AbstractControlOptions = {\n      validators: field._validators,\n      asyncValidators: field._asyncValidators,\n      updateOn: field.modelOptions.updateOn,\n    };\n    let control: AbstractControl;\n\n    const form = field.parent.formControl as FormGroup;\n    const value = getFieldValue(field);\n    const paths = getKeyPath(field);\n    if (field.formControl instanceof AbstractControl || (form && form.get(paths))) {\n      control = field.formControl || form.get(paths);\n      if (\n        (controlOptions.validators !== control.validator)\n        || (controlOptions.asyncValidators !== control.asyncValidator)\n      ) {\n        if (controlOptions.validators !== control.validator) {\n          control.setValidators(controlOptions.validators);\n        }\n        if (controlOptions.asyncValidators !== control.asyncValidator) {\n          control.setAsyncValidators(controlOptions.asyncValidators);\n        }\n        control.updateValueAndValidity();\n      }\n    } else if (field._componentFactory && field._componentFactory.component && field._componentFactory.component.createControl) {\n      const component = field._componentFactory.component;\n      console.warn(`NgxFormly: '${component.name}::createControl' is deprecated since v5.0, use 'prePopulate' hook instead.`);\n      control = component.createControl(value, field);\n    } else if (field.fieldGroup) {\n      // TODO: move to postPopulate\n      control = new FormGroup({}, controlOptions);\n    } else {\n      control = new FormControl(value, controlOptions);\n    }\n\n    registerControl(field, control);\n  }\n}\n","import { FormlyExtension, FormlyConfig, TemplateManipulators } from '../../services/formly.config';\nimport { FormlyFieldConfigCache, FormlyFieldConfig } from '../../components/formly.field.config';\nimport { FormGroup } from '@angular/forms';\nimport { getFieldId, assignModelValue, isUndefined, getFieldValue, reverseDeepMerge, getKeyPath } from '../../utils';\n\n/** @experimental */\nexport class CoreExtension implements FormlyExtension {\n  private formId = 0;\n  constructor(private formlyConfig: FormlyConfig) { }\n\n  prePopulate(field: FormlyFieldConfigCache) {\n    this.getFieldComponentInstance(field).prePopulate();\n    if (field.parent) {\n      return;\n    }\n\n    const fieldTransforms = (field.options && field.options.fieldTransform) || this.formlyConfig.extras.fieldTransform;\n    (Array.isArray(fieldTransforms) ? fieldTransforms : [fieldTransforms]).forEach(fieldTransform => {\n      if (fieldTransform) {\n        console.warn(`NgxFormly: fieldTransform is deprecated since v5.0, use custom extension instead.`);\n        const fieldGroup = fieldTransform(field.fieldGroup, field.model, <FormGroup>field.formControl, field.options);\n        if (!fieldGroup) {\n          throw new Error('fieldTransform must return an array of fields');\n        }\n      }\n    });\n  }\n\n  onPopulate(field: FormlyFieldConfigCache) {\n    this.initFieldOptions(field);\n    this.getFieldComponentInstance(field).onPopulate();\n    if (field.fieldGroup) {\n      field.fieldGroup.forEach((f, index) => {\n        Object.defineProperty(f, 'parent', { get: () => field, configurable: true });\n        Object.defineProperty(f, 'index', { get: () => index, configurable: true });\n        this.formId++;\n      });\n    }\n  }\n\n  postPopulate(field: FormlyFieldConfigCache) {\n    this.getFieldComponentInstance(field).postPopulate();\n  }\n\n  private initFieldOptions(field: FormlyFieldConfigCache) {\n    const root = <FormlyFieldConfigCache> field.parent;\n    if (!root) {\n      return;\n    }\n\n    Object.defineProperty(field, 'form', { get: () => root.formControl, configurable: true });\n    Object.defineProperty(field, 'options', { get: () => root.options, configurable: true });\n    Object.defineProperty(field, 'model', {\n      get: () => field.key && field.fieldGroup ? getFieldValue(field) : root.model,\n      configurable: true,\n    });\n\n    reverseDeepMerge(field, {\n      id: getFieldId(`formly_${this.formId}`, field, field['index']),\n      hooks: {},\n      modelOptions: {},\n      templateOptions: !field.type || !field.key ? {} : {\n        label: '',\n        placeholder: '',\n        focus: false,\n      },\n    });\n\n    if (field.lifecycle) {\n      console.warn(`NgxFormly: 'lifecycle' is deprecated since v5.0, use 'hooks' instead.`);\n    }\n\n    if (field.template && field.type !== 'formly-template') {\n      if (field.type) {\n        console.warn(`NgxFormly: passing 'type' property is not allowed when 'template' is set.`);\n      }\n      field.type = 'formly-template';\n    }\n\n    if (!field.type && field.fieldGroup) {\n      field.type = 'formly-group';\n    }\n\n    if (field.type) {\n      this.formlyConfig.getMergedField(field);\n    }\n\n    if (!isUndefined(field.defaultValue) && isUndefined(getFieldValue(field))) {\n      assignModelValue(root.model, getKeyPath(field), field.defaultValue);\n    }\n\n    this.initFieldWrappers(field);\n  }\n\n  private initFieldWrappers(field: FormlyFieldConfig) {\n    field.wrappers = field.wrappers || [];\n    const fieldTemplateManipulators: TemplateManipulators = {\n      preWrapper: [],\n      postWrapper: [],\n      ...(field.templateOptions.templateManipulators || {}),\n    };\n\n    field.wrappers = [\n      ...this.formlyConfig.templateManipulators.preWrapper.map(m => m(field)),\n      ...fieldTemplateManipulators.preWrapper.map(m => m(field)),\n      ...field.wrappers,\n      ...this.formlyConfig.templateManipulators.postWrapper.map(m => m(field)),\n      ...fieldTemplateManipulators.postWrapper.map(m => m(field)),\n    ].filter((el, i, a) => el && i === a.indexOf(el));\n  }\n\n  private getFieldComponentInstance(field: FormlyFieldConfigCache) {\n    const componentRef = this.formlyConfig.createComponent(field);\n    const instance: FormlyExtension = componentRef ? componentRef.instance as any : {};\n\n    return {\n      prePopulate: () => instance.prePopulate && instance.prePopulate(field),\n      onPopulate: () => instance.onPopulate && instance.onPopulate(field),\n      postPopulate: () => instance.postPopulate && instance.postPopulate(field),\n    };\n  }\n}\n","import { NgModule, ModuleWithProviders, ANALYZE_FOR_ENTRY_COMPONENTS, Inject, Optional } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormlyForm } from './components/formly.form';\nimport { FormlyField } from './components/formly.field';\nimport { FormlyAttributes } from './components/formly.attributes';\nimport { FormlyConfig, ConfigOption, FORMLY_CONFIG } from './services/formly.config';\nimport { FormlyFormBuilder } from './services/formly.form.builder';\nimport { FormlyGroup } from './templates/formly.group';\nimport { FormlyValidationMessage } from './templates/formly.validation-message';\nimport { FormlyTemplateType } from './templates/field-template.type';\n\nimport { FieldExpressionExtension } from './extensions/field-expression/field-expression';\nimport { FieldValidationExtension } from './extensions/field-validation/field-validation';\nimport { FieldFormExtension } from './extensions/field-form/field-form';\nimport { CoreExtension } from './extensions/core/core';\n\nexport function defaultFormlyConfig(formlyConfig: FormlyConfig): ConfigOption {\n  return {\n    types: [\n      { name: 'formly-group', component: FormlyGroup },\n      { name: 'formly-template', component: FormlyTemplateType },\n    ],\n    extensions: [\n      { name: 'core', extension: new CoreExtension(formlyConfig) },\n      { name: 'field-validation', extension: new FieldValidationExtension(formlyConfig) },\n      { name: 'field-form', extension: new FieldFormExtension() },\n      { name: 'field-expression', extension: new FieldExpressionExtension() },\n    ],\n  };\n}\n\n@NgModule({\n  declarations: [\n    FormlyForm,\n    FormlyField,\n    FormlyAttributes,\n    FormlyGroup,\n    FormlyValidationMessage,\n    FormlyTemplateType,\n  ],\n  entryComponents: [FormlyGroup, FormlyTemplateType],\n  exports: [FormlyForm, FormlyField, FormlyAttributes, FormlyGroup, FormlyValidationMessage],\n  imports: [CommonModule],\n})\nexport class FormlyModule {\n  static forRoot(config: ConfigOption = {}): ModuleWithProviders {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        { provide: FORMLY_CONFIG, multi: true, useFactory: defaultFormlyConfig, deps: [FormlyConfig] },\n        { provide: FORMLY_CONFIG, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n        FormlyConfig,\n        FormlyFormBuilder,\n      ],\n    };\n  }\n\n  static forChild(config: ConfigOption = {}): ModuleWithProviders {\n    return {\n      ngModule: FormlyModule,\n      providers: [\n        { provide: FORMLY_CONFIG, useValue: config, multi: true },\n        { provide: ANALYZE_FOR_ENTRY_COMPONENTS, useValue: config, multi: true },\n        FormlyFormBuilder,\n      ],\n    };\n  }\n\n  constructor(\n    configService: FormlyConfig,\n    @Optional() @Inject(FORMLY_CONFIG) configs: ConfigOption[] = [],\n  ) {\n    if (!configs) {\n      return;\n    }\n\n    configs.forEach(config => configService.addConfig(config));\n  }\n}\n"]}