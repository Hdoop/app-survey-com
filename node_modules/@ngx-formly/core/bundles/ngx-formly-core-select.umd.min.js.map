{"version":3,"sources":["ng://@ngx-formly/core/select/select-options.pipe.ts","ng://@ngx-formly/core/select/select.module.ts"],"names":["FormlySelectOptionsPipe","prototype","transform","options","field","_this","this","Observable","observableOf","pipe","map","value","toOptions","gOptions","groups","to","templateOptions","option","getGroupProp","push","label","group","toOption","item","getLabelProp","getValueProp","disabled","getDisabledProp","labelProp","shouldUseLegacyOption","valueProp","key","disabledProp","groupProp","Pipe","args","name","FormlySelectModule","NgModule","declarations","exports"],"mappings":"6cAAA,IAAAA,EAAA,WAKA,SAAAA,KA0FA,OAxFEA,EAAAC,UAAAC,UAAA,SAAUC,EAASC,GAAnB,IAAAC,EAAAC,KAKE,OAJMH,aAAmBI,EAAAA,aACvBJ,EAAUK,EAAAA,GAAaL,IAGlB,EAA6BM,KAClCC,EAAAA,IAAG,SAACC,GAAS,OAAAN,EAAKO,UAAUD,EAAOP,GAAS,QAIxCJ,EAAAC,UAAAW,UAAR,SAAkBT,EAASC,GAA3B,IAAAC,EAAAC,KACQO,EAAkB,GACtBC,EAAmC,GACnCC,EAAKX,EAAMY,iBAAmB,GAiBhC,OAfAb,EAAQO,IAAG,SAAEO,GACNZ,EAAKa,aAAaD,EAAQF,IAGxBD,EAAOT,EAAKa,aAAaD,EAAQF,MACpCD,EAAOT,EAAKa,aAAaD,EAAQF,IAAO,GACxCF,EAASM,KAAK,CACZC,MAAOf,EAAKa,aAAaD,EAAQF,GACjCM,MAAOP,EAAOT,EAAKa,aAAaD,EAAQF,OAG5CD,EAAOT,EAAKa,aAAaD,EAAQF,IAAKI,KAAKd,EAAKiB,SAASL,EAAQF,KATjEF,EAASM,KAAKd,EAAKiB,SAASL,EAAQF,MAajCF,GAGDb,EAAAC,UAAAqB,SAAR,SAAiBC,EAAMR,GACrB,MAAO,CACLK,MAAOd,KAAKkB,aAAaD,EAAMR,GAC/BJ,MAAOL,KAAKmB,aAAaF,EAAMR,GAC/BW,SAAUpB,KAAKqB,gBAAgBJ,EAAMR,KAAO,IAIxCf,EAAAC,UAAAuB,aAAR,SAAqBD,EAAMR,GACzB,MAA4B,mBAAjBA,EAAGa,UACLb,EAAGa,UAAUL,GAGlBjB,KAAKuB,sBAAsBN,EAAMR,GAC5BQ,EAAKZ,MAGPY,EAAKR,EAAGa,WAAa,UAGtB5B,EAAAC,UAAAwB,aAAR,SAAqBF,EAAMR,GACzB,MAA4B,mBAAjBA,EAAGe,UACLf,EAAGe,UAAUP,GAGlBjB,KAAKuB,sBAAsBN,EAAMR,GAC5BQ,EAAKQ,IAGPR,EAAKR,EAAGe,WAAa,UAGtB9B,EAAAC,UAAA0B,gBAAR,SAAwBJ,EAAMR,GAC5B,MAA+B,mBAApBA,EAAGiB,aACLjB,EAAGiB,aAAaT,GAElBA,EAAKR,EAAGiB,cAAgB,aAGzBhC,EAAAC,UAAAiB,aAAR,SAAqBK,EAAMR,GACzB,MAA4B,mBAAjBA,EAAGkB,UACLlB,EAAGkB,UAAUV,GAGfA,EAAKR,EAAGkB,WAAa,UAGtBjC,EAAAC,UAAA4B,sBAAR,SAA8BN,EAAMR,GAClC,OAAQA,EAAGe,YACLf,EAAGa,WACI,MAARL,GACgB,iBAATA,GACP,QAASA,GACT,UAAWA,uBAxFnBW,EAAAA,KAAIC,KAAA,CAAC,CAAEC,KAAM,0BA0FdpC,EA/FA,GCAAqC,EAAA,WAGA,SAAAA,KAIkC,2BAJjCC,EAAAA,SAAQH,KAAA,CAAC,CACRI,aAAc,CAACvC,GACfwC,QAAS,CAACxC,OAEsBqC,EAPlC","sourcesContent":["import { Pipe, PipeTransform } from '@angular/core';\nimport { Observable, of as observableOf } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { FormlyFieldConfig } from '@ngx-formly/core';\n\n@Pipe({ name: 'formlySelectOptions' })\nexport class FormlySelectOptionsPipe implements PipeTransform {\n  transform(options, field?: FormlyFieldConfig) {\n    if (!(options instanceof Observable)) {\n      options = observableOf(options);\n    }\n\n    return (options as Observable<any>).pipe(\n      map(value => this.toOptions(value, field || {})),\n    );\n  }\n\n  private toOptions(options, field: FormlyFieldConfig) {\n    const gOptions: any[] = [],\n      groups: { [key: string]: any[] } = {},\n      to = field.templateOptions || {};\n\n    options.map((option: any) => {\n      if (!this.getGroupProp(option, to)) {\n        gOptions.push(this.toOption(option, to));\n      } else {\n        if (!groups[this.getGroupProp(option, to)]) {\n          groups[this.getGroupProp(option, to)] = [];\n          gOptions.push({\n            label: this.getGroupProp(option, to),\n            group: groups[this.getGroupProp(option, to)],\n          });\n        }\n        groups[this.getGroupProp(option, to)].push(this.toOption(option, to));\n      }\n    });\n\n    return gOptions;\n  }\n\n  private toOption(item, to) {\n    return {\n      label: this.getLabelProp(item, to),\n      value: this.getValueProp(item, to),\n      disabled: this.getDisabledProp(item, to) || false,\n    };\n  }\n\n  private getLabelProp(item, to): string {\n    if (typeof to.labelProp === 'function') {\n      return to.labelProp(item);\n    }\n\n    if (this.shouldUseLegacyOption(item, to)) {\n      return item.value;\n    }\n\n    return item[to.labelProp || 'label'];\n  }\n\n  private getValueProp(item, to): string {\n    if (typeof to.valueProp === 'function') {\n      return to.valueProp(item);\n    }\n\n    if (this.shouldUseLegacyOption(item, to)) {\n      return item.key;\n    }\n\n    return item[to.valueProp || 'value'];\n  }\n\n  private getDisabledProp(item, to): string {\n    if (typeof to.disabledProp === 'function') {\n      return to.disabledProp(item);\n    }\n    return item[to.disabledProp || 'disabled'];\n  }\n\n  private getGroupProp(item, to): string {\n    if (typeof to.groupProp === 'function') {\n      return to.groupProp(item);\n    }\n\n    return item[to.groupProp || 'group'];\n  }\n\n  private shouldUseLegacyOption(item, to) {\n    return !to.valueProp\n      && !to.labelProp\n      && item != null\n      && typeof item === 'object'\n      && 'key' in item\n      && 'value' in item;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { FormlySelectOptionsPipe } from './select-options.pipe';\n\n@NgModule({\n  declarations: [FormlySelectOptionsPipe],\n  exports: [FormlySelectOptionsPipe],\n})\nexport class FormlySelectModule { }\n"]}