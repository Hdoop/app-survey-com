/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output, ViewContainerRef, ViewChild, Attribute, ComponentFactoryResolver, Injector, } from '@angular/core';
import { FormGroup } from '@angular/forms';
import { FormlyConfig } from '../services/formly.config';
import { defineHiddenProp } from '../utils';
export class FormlyField {
    /**
     * @param {?} formlyConfig
     * @param {?} componentFactoryResolver
     * @param {?} injector
     * @param {?} hideDeprecation
     */
    constructor(formlyConfig, componentFactoryResolver, injector, 
    // tslint:disable-next-line
    hideDeprecation) {
        this.formlyConfig = formlyConfig;
        this.componentFactoryResolver = componentFactoryResolver;
        this.injector = injector;
        this.className = '';
        this.warnDeprecation = false;
        this.modelChange = new EventEmitter();
        this.refsUnsubscribe = (/**
         * @return {?}
         */
        () => { });
        this.warnDeprecation = hideDeprecation === null;
    }
    /**
     * @param {?} m
     * @return {?}
     */
    set model(m) {
        this.warnDeprecation && console.warn(`NgxFormly: passing 'model' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);
    }
    /**
     * @param {?} form
     * @return {?}
     */
    set form(form) {
        this.warnDeprecation && console.warn(`NgxFormly: passing 'form' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);
    }
    /**
     * @param {?} options
     * @return {?}
     */
    set options(options) {
        this.warnDeprecation && console.warn(`NgxFormly: passing 'options' input to '${this.constructor.name}' component is not required anymore, you may remove it!`);
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.triggerHook('afterContentInit');
    }
    /**
     * @return {?}
     */
    ngAfterContentChecked() {
        this.triggerHook('afterContentChecked');
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        this.triggerHook('afterViewInit');
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        this.triggerHook('afterViewChecked');
    }
    /**
     * @return {?}
     */
    ngDoCheck() {
        this.triggerHook('doCheck');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.triggerHook('onInit');
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.field) {
            this.refsUnsubscribe = this.renderField(this.field, this.containerRef);
        }
        this.triggerHook('onChanges', changes);
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.triggerHook('onDestroy');
        this.refsUnsubscribe();
    }
    /**
     * @private
     * @param {?} f
     * @param {?} containerRef
     * @return {?}
     */
    renderField(f, containerRef) {
        this.refsUnsubscribe();
        (f.wrappers || []).forEach((/**
         * @param {?} wrapper
         * @return {?}
         */
        wrapper => {
            containerRef = this.createWrapperRef(f, containerRef, this.formlyConfig.getWrapper(wrapper));
        }));
        /** @type {?} */
        const ref = this.formlyConfig.createComponent(f, this.componentFactoryResolver, this.injector);
        if (ref) {
            containerRef.insert(ref.hostView);
            this.attachComponentRef(ref, f);
        }
        return (/**
         * @return {?}
         */
        () => {
            (f._componentRefs || []).forEach((/**
             * @param {?} componentRef
             * @return {?}
             */
            componentRef => componentRef.destroy()));
            f._componentRefs = [];
        });
    }
    /**
     * @private
     * @param {?} name
     * @param {?=} changes
     * @return {?}
     */
    triggerHook(name, changes) {
        if (this.field.hooks && this.field.hooks[name]) {
            if (!changes || changes.field) {
                this.field.hooks[name](this.field);
            }
        }
        if (this.field.lifecycle && this.field.lifecycle[name]) {
            this.field.lifecycle[name](this.field.form, this.field, this.field.model, this.field.options);
        }
    }
    /**
     * @private
     * @template T
     * @param {?} field
     * @param {?} containerRef
     * @param {?} config
     * @return {?}
     */
    createWrapperRef(field, containerRef, config) {
        /** @type {?} */
        const cfr = field.options && field.options._componentFactoryResolver
            ? field.options._componentFactoryResolver
            : this.componentFactoryResolver;
        /** @type {?} */
        const ref = containerRef.createComponent(cfr.resolveComponentFactory(config.component));
        this.attachComponentRef(ref, field);
        if (!ref.instance.fieldComponent) {
            throw Error(`${config.component.prototype.constructor.name}#fieldComponent: missing 'static' flag for '@ViewChild' query, it should be explicitly defined by '@ViewChild(..., { static: true })'.`);
        }
        return ref.instance.fieldComponent;
    }
    /**
     * @private
     * @template T
     * @param {?} ref
     * @param {?} field
     * @return {?}
     */
    attachComponentRef(ref, field) {
        if (field._componentRefs) {
            field._componentRefs.push(ref);
        }
        else {
            defineHiddenProp(field, '_componentRefs', [ref]);
        }
        Object.assign(ref.instance, { field });
    }
}
FormlyField.decorators = [
    { type: Component, args: [{
                selector: 'formly-field',
                template: `<ng-template #container></ng-template>`,
                host: {
                    '[style.display]': 'field.hide ? "none":""',
                    '[class]': 'field.className? field.className : className',
                }
            }] }
];
/** @nocollapse */
FormlyField.ctorParameters = () => [
    { type: FormlyConfig },
    { type: ComponentFactoryResolver },
    { type: Injector },
    { type: undefined, decorators: [{ type: Attribute, args: ['hide-deprecation',] }] }
];
FormlyField.propDecorators = {
    field: [{ type: Input }],
    className: [{ type: Input, args: ['class',] }],
    model: [{ type: Input }],
    form: [{ type: Input }],
    options: [{ type: Input }],
    modelChange: [{ type: Output }],
    containerRef: [{ type: ViewChild, args: ['container', (/** @type {?} */ ({ read: ViewContainerRef, static: true })),] }]
};
if (false) {
    /** @type {?} */
    FormlyField.prototype.field;
    /** @type {?} */
    FormlyField.prototype.className;
    /** @type {?} */
    FormlyField.prototype.warnDeprecation;
    /** @type {?} */
    FormlyField.prototype.modelChange;
    /** @type {?} */
    FormlyField.prototype.containerRef;
    /** @type {?} */
    FormlyField.prototype.refsUnsubscribe;
    /**
     * @type {?}
     * @private
     */
    FormlyField.prototype.formlyConfig;
    /**
     * @type {?}
     * @private
     */
    FormlyField.prototype.componentFactoryResolver;
    /**
     * @type {?}
     * @private
     */
    FormlyField.prototype.injector;
}
//# sourceMappingURL=data:application/json;base64,